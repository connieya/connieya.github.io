{"componentChunkName":"component---src-templates-post-template-tsx","path":"/when-to-use-facade-pattern/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%A3%BC%EB%AC%B8-%EB%A1%9C%EC%A7%81-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%A0%EA%B9%8C\">복잡한 주문 로직, 어떻게 관리할까?</a></p>\n<ul>\n<li><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%9D%B4%EB%8C%80%EB%A1%9C-%EA%B4%9C%EC%B0%AE%EC%9D%84%EA%B9%8C\">서비스 레이어, 이대로 괜찮을까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#facade%EC%99%80-dto%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%B1%85%EC%9E%84-%EB%B6%84%EB%A6%AC\">Facade와 DTO를 이용한 책임 분리</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%82%AC%EB%93%9C-%EB%8F%84%EC%9E%85%EC%9D%98-%EC%8B%A4%EC%A7%88%EC%A0%81%EC%9D%B8-%ED%9A%A8%EA%B3%BC\">파사드 도입의 실질적인 효과</a></p>\n<ul>\n<li><a href=\"#1-%EC%99%B8%EB%B6%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%8B%A8%EC%88%9C%ED%99%94\">1. <strong>외부 인터페이스 단순화</strong>:</a></li>\n<li><a href=\"#2-%EC%9D%BC%EA%B4%80%EB%90%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B4%80%EB%A6%AC\">2. <strong>일관된 예외 처리 및 트랜잭션 관리</strong>:</a></li>\n<li><a href=\"#3-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5%EC%9D%98-%EC%B1%85%EC%9E%84-%EB%AA%85%ED%99%95%ED%99%94\">3. <strong>서비스 계층의 책임 명확화</strong>:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EA%B2%8C-%EC%B5%9C%EC%84%A0%EC%9D%BC%EA%B9%8C\">이게 최선일까?</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mapper%EC%9D%98-%EB%8F%84%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%A3%AC-%EC%B1%85%EC%9E%84%EC%9D%98-%EC%99%84%EB%B2%BD%ED%95%9C-%EB%B6%84%EB%A6%AC\">Mapper의 도입으로 이룬 책임의 완벽한 분리</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%9D%98-%ED%95%A8%EC%A0%95-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">파사드 패턴의 함정: 주의할 점</a></p>\n<ul>\n<li><a href=\"#1-%ED%8C%8C%EC%82%AC%EB%93%9C-%EC%9E%90%EC%B2%B4%EC%9D%98-%EB%B9%84%EB%8C%80%ED%99%94-bloated-facade\">1. 파사드 자체의 비대화 (Bloated Facade)</a></li>\n<li><a href=\"#2-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%B3%B5%EC%9E%A1%EC%84%B1-%EC%A6%9D%EA%B0%80\">2. 불필요한 복잡성 증가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\">맺으며</a></p>\n<ul>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-%EC%84%A4%EA%B3%84%EB%8A%94-%EB%B3%B5%EC%9E%A1%EC%84%B1%EC%9D%84-%EB%A7%88%EC%A3%BC%ED%95%98%EB%8A%94-%EC%9A%A9%EA%B8%B0%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%EB%90%9C%EB%8B%A4\">좋은 설계는 복잡성을 마주하는 용기에서 시작된다</a></li>\n</ul>\n</li>\n</ul>","html":"<p>\"파사드 패턴을 언제 도입하는 것이 좋을까?\"</p>\n<p>이커머스 시스템의 여러 기능을 구현하면서, 대부분의 로직은 서비스 레이어(Service Layer)만으로도 충분하다고 생각했습니다.</p>\n<p>실제로 상품을 등록하고 조회하거나, '좋아요'를 누르고, 회원의 포인트를 확인하는 기능을 개발하면서 파사드의 필요성을 느끼지 못했습니다.</p>\n<p>서비스가 각 도메인의 Repository에서 데이터를 조회하고, 로직에 맞게 조합하여 결과를 내보내는 것만으로도 충분히 간결하고 명확한 구조를 만들 수 있었습니다.</p>\n<p>하지만 <strong>\"주문\"</strong> 도메인은 달랐습니다.</p>\n<h2 id=\"복잡한-주문-로직-어떻게-관리할까\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%A3%BC%EB%AC%B8-%EB%A1%9C%EC%A7%81-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%A0%EA%B9%8C\" aria-label=\"복잡한 주문 로직 어떻게 관리할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복잡한 주문 로직, 어떻게 관리할까?</h2>\n<p>'주문 생성' 로직 설계를 시작하며 머릿속으로 코드를 그려보았습니다.</p>\n<p>클라이언트의 요청에는 상품 ID와 수량만 들어올 것이고, 실제 주문을 생성하려면 서버에서는 훨씬 더 많은 일을 해야 했습니다.</p>\n<ul>\n<li>상품 ID로 각 Product의 최신 가격 정보를 조회해야 한다.</li>\n<li>상품 ID로 현재 Stock(재고) 정보를 조회하고, 주문 가능 여부를 판단해야 한다.</li>\n<li>조회된 데이터를 바탕으로 총 주문 금액을 계산해야 한다.</li>\n</ul>\n<p>이 모든 정보가 준비되어야 비로소 Order 엔티티를 생성하고 저장할 수 있다.</p>\n<h3 id=\"서비스-레이어-이대로-괜찮을까\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%9D%B4%EB%8C%80%EB%A1%9C-%EA%B4%9C%EC%B0%AE%EC%9D%84%EA%B9%8C\" aria-label=\"서비스 레이어 이대로 괜찮을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스 레이어, 이대로 괜찮을까?</h3>\n<p>이 모든 '사전 준비'와 '핵심 로직'을 <code class=\"language-text\">OrderService</code>의 <code class=\"language-text\">place()</code> 메서드 하나에 담는다고 생각해보면,\n테스트는 물론, 유지보수도 어려운 코드가 될 게 뻔했습니다.</p>\n<p>데이터 조회, 가공, 검증, 생성 등 다양한 책임이 하나의 메서드에 뒤섞이기 때문이죠.</p>\n<p>기능이 추가될수록 OrderService는 <strong><em>점점 더 비대해지고, 결국 관리하기 어려운 '뚱뚱한 서비스'</em></strong> 가 될 것입니다.</p>\n<p>이 문제를 해결하려면 다음과 같은 역할을 해줄 하나의 진입점이 필요합니다.</p>\n<ul>\n<li>'주문 생성'의 단일 진입점 역할을 맡을 것</li>\n<li>컨트롤러 입장에선 단순한 place() 메서드 하나만 호출하면 끝날 것</li>\n<li>내부적으로는 상품 조회, 재고 확인, 주문 생성 등의 복잡한 흐름을 <strong>조율(Orchestration)</strong> 할 것</li>\n</ul>\n<p>이 ‘조율자’의 역할은 파사드(Facade) 패턴이 가진 정의와 정확히 일치합니다.</p>\n<h2 id=\"facade와-dto를-이용한-책임-분리\" style=\"position:relative;\"><a href=\"#facade%EC%99%80-dto%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%B1%85%EC%9E%84-%EB%B6%84%EB%A6%AC\" aria-label=\"facade와 dto를 이용한 책임 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facade와 DTO를 이용한 책임 분리</h2>\n<p>저는 애플리케이션 레이어(Application Layer) 를 새로 만들고,</p>\n<p>그 안에 OrderFacade를 두어 이 복잡한 과정을 위임하기로 결정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderFacade</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductService</span> productService<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">placeOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderCriteria</span> criteria<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Facade는 흐름만 제어한다.</span>\n        <span class=\"token comment\">// 1. 조회 -> 2. 변환 -> 3. 실행</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products <span class=\"token operator\">=</span> productService<span class=\"token punctuation\">.</span><span class=\"token function\">getProductsByIds</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">.</span><span class=\"token function\">getProductIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OrderCommand</span> command <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">toCommand</span><span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">,</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DTO가 변환 책임</span>\n        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">place</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// .. 이후 재고 차감 , 결제 등등</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 파사드 자체의 비대화를 막기 위해, 데이터 변환의 책임을 요청 DTO인 OrderCriteria에 부여하는 아이디어를 적용했습니다.</p>\n<p>위 코드에서 핵심은 criteria.toCommand(...) 부분입니다. 파사드는 단순히 흐름을 조율하고, 도메인 객체(Product)를 이용해 가격을 계산하고 데이터를 가공하는 복잡한 '변환'의 책임은 OrderCriteria DTO가 직접 수행하도록 역할을 위임한 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PRIVATE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderCriteria</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderItem</span><span class=\"token punctuation\">></span></span> orderItems<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderItem</span><span class=\"token punctuation\">></span></span> orderItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> userId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderItems <span class=\"token operator\">=</span> orderItems<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token annotation punctuation\">@RequiredArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PRIVATE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderItem</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> quantity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getProductIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> orderItems<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderItem</span><span class=\"token operator\">::</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderCommand</span> <span class=\"token function\">toCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 상품 ID를 키로 사용하여 Product 객체를 쉽게 찾을 수 있도록 Map으로 만듭니다.</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> productMap <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> product <span class=\"token operator\">-></span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 각 상품의 가격과 주문 수량을 곱하여 총 주문 금액을 계산합니다.</span>\n        <span class=\"token class-name\">Long</span> totalAmount <span class=\"token operator\">=</span> orderItems<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">mapToLong</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// 요청된 주문 상품 목록(orderItems)을 OrderCommand에서 사용할 새로운 목록으로 변환합니다.</span>\n        <span class=\"token comment\">//         이 과정에서 각 상품의 가격(price) 정보가 함께 담깁니다.</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderCommand<span class=\"token punctuation\">.</span>OrderItem</span><span class=\"token punctuation\">></span></span> convertedItems <span class=\"token operator\">=</span> orderItems<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderCommand<span class=\"token punctuation\">.</span>OrderItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">productId</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">quantity</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 위에서 준비된 모든 정보를 담아 최종 OrderCommand 객체를 생성하고 반환합니다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> convertedItems<span class=\"token punctuation\">,</span> totalAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"파사드-도입의-실질적인-효과\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%82%AC%EB%93%9C-%EB%8F%84%EC%9E%85%EC%9D%98-%EC%8B%A4%EC%A7%88%EC%A0%81%EC%9D%B8-%ED%9A%A8%EA%B3%BC\" aria-label=\"파사드 도입의 실질적인 효과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파사드 도입의 실질적인 효과</h3>\n<p>이 간단해 보이는 OrderFacade가 가져오는 효과는 강력합니다.</p>\n<br/>\n<h4 id=\"1-외부-인터페이스-단순화\" style=\"position:relative;\"><a href=\"#1-%EC%99%B8%EB%B6%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%8B%A8%EC%88%9C%ED%99%94\" aria-label=\"1 외부 인터페이스 단순화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <strong>외부 인터페이스 단순화</strong>:</h4>\n<p>파사드의 가장 큰 장점입니다. 이제 <code class=\"language-text\">OrderController</code>와 같은 클라이언트는 <code class=\"language-text\">OrderFacade.place()</code> 메서드 하나만 호출하면 됩니다. <br/>\n내부적으로 상품 정보를 조회하고, 가격을 계산하고, 재고를 확인하는 등 복잡한 과정이 어떻게 일어나는지 전혀 알 필요가 없습니다.  파사드가 없다면 클라이언트가 직접 <code class=\"language-text\">ProductService</code>, <code class=\"language-text\">StockService</code>, <code class=\"language-text\">OrderService</code> 등을 모두 호출하며 로직을 조율해야 했을 겁니다.\n<br/>\n파사드는 이 복잡한 의존성을 숨겨주는 단일 창구(Unified Interface) 역할을 완벽하게 수행합니다.</p>\n<br/>\n<h4 id=\"2-일관된-예외-처리-및-트랜잭션-관리\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EA%B4%80%EB%90%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B4%80%EB%A6%AC\" aria-label=\"2 일관된 예외 처리 및 트랜잭션 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <strong>일관된 예외 처리 및 트랜잭션 관리</strong>:</h4>\n<p>주문 프로세스는 예외 상황이 자주 발생합니다. 재고가 부족하거나, 상품이 판매 중지되거나, 결제에 실패할 수 있습니다.\n<br/>\n이 모든 흐름을 지휘하는 파사드는 공통 관심사(cross-cutting concern)를 처리하기에 가장 자연스러운 경계입니다.\n<br/>\n<code class=\"language-text\">OrderFacade.place()</code> 메서드는 하나의 완전한 비즈니스 단위(Unit of Work)를 나타내므로, @Transactional을 선언하기에 가장 적합합니다.</p>\n<br/>\n<h4 id=\"3-서비스-계층의-책임-명확화\" style=\"position:relative;\"><a href=\"#3-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5%EC%9D%98-%EC%B1%85%EC%9E%84-%EB%AA%85%ED%99%95%ED%99%94\" aria-label=\"3 서비스 계층의 책임 명확화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <strong>서비스 계층의 책임 명확화</strong>:</h4>\n<p><code class=\"language-text\">OrderService</code>는 이제 '사전 준비'라는 부가적인 책임에서 벗어나, <strong>'주문 생성'</strong> 이라는 자신의 <strong>핵심 도메인 로직</strong>에 만 집중할 수 있게 되었습니다.</p>\n<h3 id=\"이게-최선일까\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%8C-%EC%B5%9C%EC%84%A0%EC%9D%BC%EA%B9%8C\" aria-label=\"이게 최선일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이게 최선일까?</h3>\n<p>이 구조 덕분에 OrderService는 한결 가벼워졌습니다.  하지만 코드를 다시 보니, DTO의 역할에 의문이 생겼습니다.</p>\n<p>'요청 데이터를 전달하는 객체가, 도메인 객체인 Product를 직접 참조하고 가격 계산 로직까지 품는 것이 과연 올바른 책임 분배일까?'</p>\n<p>DTO는 순수한 데이터 운반 객체(Data Transfer Object)여야 한다는 원칙을 생각하면, 지금 OrderCriteria는 자신의 역할을 넘어 너무 많은 것을 알고 있는 셈이었습니다.</p>\n<h2 id=\"mapper의-도입으로-이룬-책임의-완벽한-분리\" style=\"position:relative;\"><a href=\"#mapper%EC%9D%98-%EB%8F%84%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%A3%AC-%EC%B1%85%EC%9E%84%EC%9D%98-%EC%99%84%EB%B2%BD%ED%95%9C-%EB%B6%84%EB%A6%AC\" aria-label=\"mapper의 도입으로 이룬 책임의 완벽한 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapper의 도입으로 이룬 책임의 완벽한 분리</h2>\n<p>그래서 저는 이 '변환'이라는 책임을 온전히 담당할 별도의 Mapper 클래스를 추가로 도입하기로 결정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderCommandMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OrderCommand</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId <span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderCriteria</span> orderCriteria <span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> productMap <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> product <span class=\"token operator\">-></span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderCriteria<span class=\"token punctuation\">.</span>OrderItem</span><span class=\"token punctuation\">></span></span> orderItems <span class=\"token operator\">=</span> orderCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Long</span> totalAmount <span class=\"token operator\">=</span> orderItems<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">mapToLong</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderCommand<span class=\"token punctuation\">.</span>OrderItem</span><span class=\"token punctuation\">></span></span> convertedItems <span class=\"token operator\">=</span> orderItems<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderCommand<span class=\"token punctuation\">.</span>OrderItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">productId</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">quantity</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> convertedItems<span class=\"token punctuation\">,</span>totalAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mapper의 등장으로 모든 객체는 자신의 책임에만 완벽하게 충실해졌습니다.</p>\n<ul>\n<li>OrderCriteria (DTO): 오직 데이터 전달.</li>\n<li>OrderCommandMapper: DTO와 도메인 객체를 Command 객체로 변환.</li>\n<li>OrderFacade: 전체 흐름(조회 → 변환 → 실행)을 지휘.</li>\n<li>OrderService: 핵심 비즈니스 로직만 처리.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 최종 설계: 완벽하게 책임을 분리한 Facade</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderFacade</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductService</span> productService<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">placeOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderCriteria</span> criteria<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products <span class=\"token operator\">=</span> productService<span class=\"token punctuation\">.</span><span class=\"token function\">getProductsByIds</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">.</span><span class=\"token function\">getProductIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OrderCommand</span> command <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderCommandMapper</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> criteria<span class=\"token punctuation\">,</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         orderService<span class=\"token punctuation\">.</span><span class=\"token function\">place</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// .. 이후 재고 차감 , 결제 등등</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"파사드-패턴의-함정-주의할-점\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%9D%98-%ED%95%A8%EC%A0%95-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"파사드 패턴의 함정 주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파사드 패턴의 함정: 주의할 점</h2>\n<p>하지만 파사드 패턴이 만병통치약은 결코 아닙니다. 잘못 사용하면 오히려 독이 될 수 있습니다.</p>\n<h3 id=\"1-파사드-자체의-비대화-bloated-facade\" style=\"position:relative;\"><a href=\"#1-%ED%8C%8C%EC%82%AC%EB%93%9C-%EC%9E%90%EC%B2%B4%EC%9D%98-%EB%B9%84%EB%8C%80%ED%99%94-bloated-facade\" aria-label=\"1 파사드 자체의 비대화 bloated facade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 파사드 자체의 비대화 (Bloated Facade)</h3>\n<p>가장 경계해야 할 안티패턴입니다. OrderService가 비대해지는 것을 막으려다, 반대로 OrderFacade에 모든 책임을 몰아주면 어떻게 될까요?</p>\n<p>결국 파사드가 여러 도메인의 서비스를 모두 호출하고, 복잡한 비즈니스 로직을 직접 처리하며 거대한 '몬스터 클래스'가 되어버립니다.</p>\n<p>이는 문제를 해결한 것이 아니라, 그저 다른 곳으로 문제를 옮긴 것에 불과합니다.\n사실 제가 Mapper를 추가로 도입하게 된 데에는 바로 이 고민이 있었습니다.</p>\n<p>처음에는 OrderFacade가 직접 데이터 변환 로직까지 처리하도록 만들 수도 있었습니다. 하지만 그랬다면, 앞으로 주문 관련 로직이 추가될수록 OrderFacade는 점점 더 많은 책임을 떠안으며 비대해졌을 겁니다.</p>\n<p>Mapper를 통해 '변환'이라는 책임을 명확히 분리함으로써, 파사드가 '흐름 제어'라는 자신의 본질적인 역할에만 충실하도록 지킬 수 있었습니다.</p>\n<h3 id=\"2-불필요한-복잡성-증가\" style=\"position:relative;\"><a href=\"#2-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%B3%B5%EC%9E%A1%EC%84%B1-%EC%A6%9D%EA%B0%80\" aria-label=\"2 불필요한 복잡성 증가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 불필요한 복잡성 증가</h3>\n<p>글의 서두에서 언급했듯, 간단한 로직에 굳이 파사드를 도입하는 것은 배보다 배꼽이 더 큰 격입니다.</p>\n<p>단지 데이터를 조회해서 보여주는 기능에 파사드를 도입한다면, 클래스 개수만 늘어나고 코드의 흐름을 추적하기 더 어려워지는 부작용을 낳습니다.</p>\n<p>파사드는 여러 서브 시스템의 협력이 필요하여 복잡성이 '실제로' 존재할 때 그 가치가 빛납니다.</p>\n<h2 id=\"맺으며\" style=\"position:relative;\"><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\" aria-label=\"맺으며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맺으며</h2>\n<h3 id=\"좋은-설계는-복잡성을-마주하는-용기에서-시작된다\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%84%A4%EA%B3%84%EB%8A%94-%EB%B3%B5%EC%9E%A1%EC%84%B1%EC%9D%84-%EB%A7%88%EC%A3%BC%ED%95%98%EB%8A%94-%EC%9A%A9%EA%B8%B0%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%EB%90%9C%EB%8B%A4\" aria-label=\"좋은 설계는 복잡성을 마주하는 용기에서 시작된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 설계는 복잡성을 마주하는 용기에서 시작된다</h3>\n<p>이번 '주문' 도메인 설계 경험을 통해 얻은 교훈은 명확합니다.</p>\n<ol>\n<li>\n<p><strong>패턴은 필요할 때 비로소 빛을 발합니다.</strong>  '주문'처럼 여러 도메인이 얽힌 복잡한 프로세스를 마주했을 때, 파사드는 그 복잡성이 다른 곳으로 퍼지지 않도록 막아주는 훌륭한 방화벽 역할을 해주었습니다.</p>\n</li>\n<li>\n<p><strong>좋은 설계는 '예측'과 '분리'에서 나옵니다.</strong>  Facade는 흐름 제어, Mapper는 데이터 변환, Service는 핵심 로직이라는 각자의 역할에만 충실할 때 시스템 전체가 안정되고 유연해진다는 것을 체감했습니다.</p>\n</li>\n<li>\n<p><strong>항상 더 나은 설계를 질문해야 합니다.</strong> 처음의 해결책에 만족하지 않고 'DTO의 책임이 과연 적절한가?'라는 작은 의심이 Mapper라는 더 나은 해결책으로 이끌었고, '파사드가 비대해지면 어떡하지?'라는 고민이 책임 분리의 중요성을 다시 한번 일깨워주었습니다</p>\n</li>\n</ol>","timeToRead":5,"frontmatter":{"title":"파사드 패턴으로 체지방 걷어내기","summary":null,"date":"2025-08-01","categories":["facade"],"thumbnail":null}}}]}},"pageContext":{"slug":"/when-to-use-facade-pattern/"}},"staticQueryHashes":[],"slicesMap":{}}