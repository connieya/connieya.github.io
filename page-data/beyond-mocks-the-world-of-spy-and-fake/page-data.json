{"componentChunkName":"component---src-templates-post-template-tsx","path":"/beyond-mocks-the-world-of-spy-and-fake/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%8C%80%EC%97%AD%EC%9D%B8%EA%B0%80\">테스트 더블: 무엇을 위한 대역인가?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%9D%B4%EB%A6%84%EB%B3%B4%EB%8B%A4-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EC%97%AD%ED%95%A0\">도구의 이름보다 중요한 것은 '역할'</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B5%AC%EC%A1%B0-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">테스트 더블 사용하기 전, 도메인 구조 간단히 살펴보기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mock%EC%9D%98-%EB%B0%B0%EC%8B%A0-%EC%B4%88%EB%A1%9D%EB%B6%88-%EB%92%A4%EC%97%90-%EC%88%A8%EA%B2%A8%EC%A7%84-%EB%B2%84%EA%B7%B8\">Mock의 배신: 초록불 뒤에 숨겨진 버그</a></p>\n</li>\n<li>\n<p><a href=\"#fake--%EC%96%B4%EC%84%A4%ED%94%88-%EA%B0%80%EC%A7%9C%EB%8A%94-%EB%B2%84%EA%B7%B8%EB%A5%BC-%EB%86%93%EC%B9%9C%EB%8B%A4\">Fake : 어설픈 가짜는 버그를 놓친다</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EA%B5%90%ED%95%9C-fake--%EB%93%9C%EB%94%94%EC%96%B4-%EB%B2%84%EA%B7%B8%EB%A5%BC-%EC%9E%A1%EB%8B%A4\">정교한 Fake : 드디어 버그를 잡다</a></p>\n</li>\n<li>\n<p><a href=\"#spy--%EC%8B%A4%EC%A0%9C-%EB%A1%9C%EC%A7%81%EC%9D%84-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EC%B5%9C%ED%9B%84%EC%9D%98-%EC%88%98%EB%8B%A8\">Spy : 실제 로직을 탐험하는 최후의 수단</a></p>\n<ul>\n<li><a href=\"#spy-%EB%8A%94-%EC%9A%B0%EB%A6%AC%EC%97%90%EA%B2%8C-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%B3%B4%EC%97%AC%EC%A3%BC%EC%97%88%EB%8A%94%EA%B0%80\">Spy 는 우리에게 무엇을 보여주었는가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%B5%9C%EC%A0%81%EC%9D%98-%EB%8F%84%EA%B5%AC-%EC%84%A0%ED%83%9D\">관심사에 따른 최적의 도구 선택</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\">맺으며</a></p>\n</li>\n</ul>","html":"<p>테스트 코드는 소프트웨어의 품질을 유지하기 위한 중요한 도구입니다. 특히 복잡한 시스템일수록, 외부 의존성을 격리하고 대상 로직만을 검증하기 위해 '테스트 더블(Test Double)'을 적절히 사용하는 것이 필수적입니다.</p>\n<p>하지만 테스트 더블의 개념은 다소 모호하게 전달되는 경우가 많고, 이를 잘못 사용하면 테스트는 통과하더라도 실제 서비스 환경에서 문제가 발생할 수 있습니다.</p>\n<p>이 글은 제가 하나의 '버그'를 두고, 각기 다른 테스트 더블들이 어떻게 반응하는지를 추적하며 얻은 명확한 사용 기준에 대한 기록입니다.</p>\n<br/>\n<h3 id=\"테스트-더블-무엇을-위한-대역인가\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%8C%80%EC%97%AD%EC%9D%B8%EA%B0%80\" aria-label=\"테스트 더블 무엇을 위한 대역인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 더블: 무엇을 위한 대역인가?</h3>\n<p>테스트 더블은 테스트 대상(SUT, System Under Test)이 의존하는 객체를 대체하는 가짜 객체의 총칭입니다. 각 더블은 저마다 다른 목적을 가집니다.</p>\n<ul>\n<li>\n<p>Dummy: 말 그대로 '더미'입니다. 객체는 필요하지만 그 기능은 전혀 사용되지 않을 때, 메서드의 인자 자리를 채우기 위해 전달되는 깡통 객체입니다. 보통 <code class=\"language-text\">null</code>을 전달하거나 비어 있는 객체를 생성하여 사용합니다.</p>\n</li>\n<li>\n<p>Fake: 실제 구현을 단순화하여 대체한 경량화된 구현체입니다. 실제 DB 대신 HashMap 기반의 인메모리 Repository를 만드는 것이 대표적인 예입니다. 실제처럼 동작하지만, 프로덕션에서는 사용할 수 없습니다.</p>\n</li>\n<li>\n<p>Stub: 상태 검증(State Verification)을 위한 더블입니다. 호출 시 미리 정해진 고정된 응답을 제공하는 것이 주된 역할입니다. <code class=\"language-text\">userRepository.findById(\"id\")</code> 호출 시 항상 <code class=\"language-text\">Optional.of(user)</code>를 반환하게 만드는 것이 대표적입니다.</p>\n</li>\n<li>\n<p>Mock: 행위 검증(Behavior Verification)을 위한 더블입니다. 메서드가 올바른 인자로, 정확한 횟수만큼 호출되었는지를 검증하는 데 집중합니다. <code class=\"language-text\">verify(...)</code>와 같이 상호작용 자체를 테스트합니다.</p>\n</li>\n<li>\n<p>Spy: 실제 객체를 감싸는 더블입니다. 기본적으로 실제 객체의 로직을 그대로 수행하지만, 필요에 따라 특정 메서드의 행동만 선별적으로 조작하거나 호출 여부를 기록할 수 있습니다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"도구의-이름보다-중요한-것은-역할\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%9D%B4%EB%A6%84%EB%B3%B4%EB%8B%A4-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EC%97%AD%ED%95%A0\" aria-label=\"도구의 이름보다 중요한 것은 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도구의 이름보다 중요한 것은 '역할'</h3>\n<p>저는 오랫동안 테스트 더블의 <strong>'역할'</strong> 과 Mockito가 제공하는 <strong>'도구'</strong> 의 정체성을 혼동했습니다.\n<code class=\"language-text\">@Mock</code> 어노테이션을 썼으니 당연히 <strong>Mock의 역할</strong>일 것이고, <code class=\"language-text\">spy()</code> 메서드를 썼으니 <strong>Spy</strong>일 것이라 단정했습니다.</p>\n<p><code class=\"language-text\">when-then</code> 구문은 Mock의 전유물이고, <code class=\"language-text\">doReturn-when</code> 은 Spy만 쓰는 특별한 문법이라는 틀에도 갇혀 있었습니다.</p>\n<p>하지만 <code class=\"language-text\">@Mock</code>으로 만든 객체가 <code class=\"language-text\">verify</code> 없이 값만 반환하며 <code class=\"language-text\">Stub</code>처럼 동작하고, <code class=\"language-text\">spy()</code>로 만든 객체 역시 실제 로직을 실행하지 못하는 stub으로 전락하는 것을 보며, 이 모든 공식이 무너지는 경험을 했습니다.</p>\n<p>중요한 것은 사용한 도구의 이름이 아니라 그 도구를 통해 <strong>어떤 역할을 수행하게 만들었는지</strong> 즉, 달성하려는 <strong>테스트의 목적이</strong>라는 것을 깨닫게 되었습니다.</p>\n<p><br/><br/></p>\n<h4 id=\"테스트-더블-사용하기-전-도메인-구조-간단히-살펴보기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B5%AC%EC%A1%B0-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"테스트 더블 사용하기 전 도메인 구조 간단히 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 더블 사용하기 전, 도메인 구조 간단히 살펴보기</h4>\n<p>테스트 더블(mock, spy, fake 등)을 다루기 전, 이들이 어떻게 사용되는지를 이해하기 위해 먼저 애플리케이션의 도메인 구조를 간단히 짚고 넘어가겠습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepositoryAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserJpaRepository</span> userJpaRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByUserId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByUserId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token operator\">::</span><span class=\"token function\">toDomain</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>UserService: 비즈니스 로직을 처리하며, UserRepository 인터페이스에 의존합니다.</li>\n<li>UserRepositoryAdapter: UserRepository의 구현체로, 도메인 객체(User)를 영속성 객체(UserEntity)로 변환하여 UserJpaRepository에 전달하는 '어댑터' 역할을 합니다.</li>\n<li>UserEntity: 실제 DB와 매핑되는 JPA 엔티티입니다</li>\n</ul>\n<br/>\n<h3 id=\"mock의-배신-초록불-뒤에-숨겨진-버그\" style=\"position:relative;\"><a href=\"#mock%EC%9D%98-%EB%B0%B0%EC%8B%A0-%EC%B4%88%EB%A1%9D%EB%B6%88-%EB%92%A4%EC%97%90-%EC%88%A8%EA%B2%A8%EC%A7%84-%EB%B2%84%EA%B7%B8\" aria-label=\"mock의 배신 초록불 뒤에 숨겨진 버그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock의 배신: 초록불 뒤에 숨겨진 버그</h3>\n<p><strong>테스트 목표</strong>: 회원 가입 시 <code class=\"language-text\">User</code> 저장이 수행되어야 합니다.</p>\n<p>처음에는 SUT와 협력 객체 간의 '상호작용'을 검증하는 데 집중하는, 소위 '런던파(London School)' 스타일로 접근하였습니다.</p>\n<p><code class=\"language-text\">@Mock</code>으로 <code class=\"language-text\">UserRepository</code>를 만들고, <code class=\"language-text\">verify()</code>로 <code class=\"language-text\">save()</code> 호출 여부만 확인하였습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceMockTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@InjectMocks</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Mock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"회원 가입시 User 저장이 수행된다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">registerSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77@naver.com\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> birthDate <span class=\"token operator\">=</span> <span class=\"token string\">\"2020-01-01\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Gender</span> gender <span class=\"token operator\">=</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MALE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserRegisterCommand</span> command <span class=\"token operator\">=</span> <span class=\"token class-name\">UserRegisterCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> savedUser <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span>savedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">UserRegisterResult</span> result <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userCaptor <span class=\"token operator\">=</span> <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token punctuation\">.</span><span class=\"token function\">forClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">,</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>userCaptor<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">User</span> capturedUser <span class=\"token operator\">=</span> userCaptor<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>capturedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>capturedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>savedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>테스트는 통과했지만, 이는 SUT가 의존하는 User.create()나 내부 매핑 로직에 버그가 있더라도 전혀 감지하지 못한다는 심각한 문제를 안고 있었습니다.</p>\n<p>예를 들어, 동료 개발자가 User를 UserEntity로 변환하는 과정에서 아래와 같이 이메일을 하드코딩하는 실수를 저질렀다고 가정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UserEntity</span> <span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">UserEntity</span> userEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        userEntity<span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userEntity<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">\"BUG@example.com\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이메일 하드코딩 버그!</span>\n        userEntity<span class=\"token punctuation\">.</span>birthDate <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userEntity<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> userEntity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>그리고 이 버그가 포함된 fromDomain 메서드는 다음과 같이 UserRepositoryAdapter의 save 메서드 내부에서 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepositoryAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepositoryOut</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserJpaRepository</span> userJpaRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br/>\n<p>이 코드는 모든 신규 회원의 이메일을 \"<a href=\"mailto:BUG@example.com\" target=\"_blank\" rel=\"nofollow\">BUG@example.com</a>\"으로 저장하게 됩니다. 하지만 Mock 기반의 테스트는 이 버그를 전혀 잡아내지 못하였습니다.</p>\n<p>@Mock은 속이 텅 빈 가짜 객체를 생성합니다. UserRepository의 실제 구현체인 UserRepositoryAdapter와는 전혀 관련이 없습니다.</p>\n<p>따라서 버그가 포함된 매핑 로직은 테스트 중 단 한 줄도 실행되지 않았습니다.</p>\n<p>테스트는 그저 우리가 약속한 대로 행동할 뿐이며, 실제 운영에서는 심각한 버그가 발생하더라도 테스트는 여전히 초록불을 띄우며 \"괜찮다\"고 말하게 됩니다.</p>\n<p>이것이 많은 개발자들이 “Mock을 최소화해야 한다”고 이야기하는 이유입니다. 좀 더 실제 실행 흐름에 가까운 테스트가 필요했습니다.</p>\n<br/>\n<h3 id=\"fake--어설픈-가짜는-버그를-놓친다\" style=\"position:relative;\"><a href=\"#fake--%EC%96%B4%EC%84%A4%ED%94%88-%EA%B0%80%EC%A7%9C%EB%8A%94-%EB%B2%84%EA%B7%B8%EB%A5%BC-%EB%86%93%EC%B9%9C%EB%8B%A4\" aria-label=\"fake  어설픈 가짜는 버그를 놓친다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fake : 어설픈 가짜는 버그를 놓친다</h3>\n<p>'상태'를 검증하는 것을 중시하는 '고전파(Classicist School)' 또는 '시카고파'로 알려진 Fake 객체를 도입하였습니다. 처음에는 HashMap 기반의 단순한 저장소 모델을 만들었습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeUserRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 도메인 객체를 그대로 저장</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>이 Fake를 사용한 테스트는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceFakeTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@BeforeEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FakeUserRepository</span> fakeUserRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FakeUserRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span>fakeUserRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"회원 가입시 User 저장이 수행된다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">registerSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77@naver.com\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> birthDate <span class=\"token operator\">=</span> <span class=\"token string\">\"1990-01-01\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Gender</span> gender <span class=\"token operator\">=</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MALE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserRegisterCommand</span> userRegisterCommand <span class=\"token operator\">=</span> <span class=\"token class-name\">UserRegisterCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">UserRegisterResult</span> userRegisterResult <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>userRegisterCommand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userRegisterResult<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userRegisterResult<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userRegisterResult<span class=\"token punctuation\">.</span><span class=\"token function\">birthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결과: 테스트 성공(초록불)</p>\n<p>또 다시 버그를 잡는 데 실패했습니다.</p>\n<p>이 단순한 Fake는 UserService가 전달해준 User 객체를 그대로 저장할 뿐, 실제 어댑터가 수행하는 중요한 매핑 로직을 완전히 누락하고 있습니다.</p>\n<p>우리가 잡으려는 버그는 UserRepositoryAdapter 내부에 숨어있는데, 이 단순한 Fake는 그곳까지 도달하지 못했던 것입니다.</p>\n<br/>\n<h3 id=\"정교한-fake--드디어-버그를-잡다\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B5%90%ED%95%9C-fake--%EB%93%9C%EB%94%94%EC%96%B4-%EB%B2%84%EA%B7%B8%EB%A5%BC-%EC%9E%A1%EB%8B%A4\" aria-label=\"정교한 fake  드디어 버그를 잡다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정교한 Fake : 드디어 버그를 잡다</h3>\n<p>Fake를 실제 어댑터의 책임까지 흉내 내도록 진화시켰습니다.</p>\n<p>진화한 Fake (어댑터 모방 모델):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeUserRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 내부적으로는 Entity 형태로 데이터를 저장한다.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">></span></span> entityStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Fake 내부에서 직접 매핑 로직을 수행!</span>\n        <span class=\"token class-name\">UserEntity</span> entity <span class=\"token operator\">=</span> <span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 버그가 있는 코드가 여기서 실행된다!</span>\n        entityStorage<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">toDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>결과: 테스트 실패(빨간불).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">expected: &lt;geonhee77@naver.com> but was: &lt;BUG@example.com></code></pre></div>\n<p>드디어 버그를 잡았습니다! 하지만 이 시점에서 또 다른 의문이 생겼습니다.</p>\n<p>\"이 FakeUserRepository도 결국 내가 직접 만들었는데, 이 가짜를 신뢰할 수 있을까?\"</p>\n<br/>\n<h3 id=\"spy--실제-로직을-탐험하는-최후의-수단\" style=\"position:relative;\"><a href=\"#spy--%EC%8B%A4%EC%A0%9C-%EB%A1%9C%EC%A7%81%EC%9D%84-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EC%B5%9C%ED%9B%84%EC%9D%98-%EC%88%98%EB%8B%A8\" aria-label=\"spy  실제 로직을 탐험하는 최후의 수단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spy : 실제 로직을 탐험하는 최후의 수단</h3>\n<p>그렇다면 실제 구현체를 사용하면서도 테스트할 방법은 없을까요? 이것이 바로 Spy가 필요한 이유입니다.</p>\n<p>Mock vs. Spy의 차이점:</p>\n<ul>\n<li>Mock: 허상의 가짜 객체로, 실제 로직이 전혀 없습니다.</li>\n<li>Spy: 실제 객체를 감싸는 투명한 옷으로, 기본적으로 실제 로직이 그대로 실행됩니다.</li>\n</ul>\n<p>이 차이를 명확히 확인하기 위해 UserRepositoryAdapter에 로그를 추가하였습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>> UserRepositoryAdapter.save() 실제 로직 실행됨! &lt;&lt;&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> userJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br/>\n<p>Spy 테스트는 다음과 같습니다.</p>\n<p>Spy를 사용하되, 내부의 DB 접근(userJpaRepository)만 Mock으로 차단했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@InjectMocks</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Mock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserJpaRepository</span> userJpaRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepositoryAdapter</span> userRepositoryAdapter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@BeforeEach</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        userRepositoryAdapter <span class=\"token operator\">=</span> <span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryAdapter</span><span class=\"token punctuation\">(</span>userJpaRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span>userRepositoryAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"회원 가입시 User 저장이 수행된다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">registerSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"geonhee77@naver.com\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> birthDate <span class=\"token operator\">=</span> <span class=\"token string\">\"1990-01-01\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Gender</span> gender <span class=\"token operator\">=</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MALE</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">UserRegisterCommand</span> userRegisterCommand <span class=\"token operator\">=</span> <span class=\"token class-name\">UserRegisterCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token function\">doReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromDomain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span>userJpaRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserEntity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">UserRegisterResult</span> userRegisterResult <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>userRegisterCommand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userCaptor <span class=\"token operator\">=</span> <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token punctuation\">.</span><span class=\"token function\">forClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>userRepositoryAdapter<span class=\"token punctuation\">,</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>userCaptor<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userRegisterResult<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userRegisterResult<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>실행 결과는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">>>></span> <span class=\"token class-name\">UserRepositoryAdapter</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실제 로직 실행됨<span class=\"token operator\">!</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span></code></pre></div>\n<p>테스트 결과 : 실패</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">expected<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>geonhee77<span class=\"token annotation punctuation\">@naver.com</span><span class=\"token operator\">></span> but was<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">BUG</span><span class=\"token annotation punctuation\">@example.com</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<p>로그가 찍혔다는 것은 Spy가 save 메서드의 실제 로직을 실행했다는 명백한 증거이며, 그 결과 숨어있던 버그를 정확히 찾아냈습니다.</p>\n<p>Spy를 통해 실제 로직이 실행되었으며, 테스트도 실패하면서 버그를 잡아주었습니다.</p>\n<p>하지만 만약, 아래와 같이 Stubbing 대상을 userJpaRepository가 아닌 userRepositoryAdapter 자신으로 바꾸면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">doReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> birthDate<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span>userRepositoryAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 결과는 테스트 성공입니다. 그리고 콘솔에 아무런 로그가 찍히지 않았습니다.</p>\n<p>위의 코드는 \"save 메서드가 호출되면, 실제 로직 실행은 잊어버리고, 내가 주는 이 값을 반환해!\" 라고 하는 것과 같습니다</p>\n<p>Spy를 실제 로직을 단 한 줄도 실행하지 못하고, 정해진 값만 반환하는 거대한 Stub로 사용한 것입니다.</p>\n<p>System.out.println 로그가 찍히지 않은 것이 그 증거입니다</p>\n<p>테스트는 성공했지만, 버그는 여전히 코드 속에 숨어있습니다.</p>\n<p>이것이 바로 제가 이전에 저질렀던 '도구와 역할을 혼동한' 실수이며, Spy를 사용할 때 가장 경계해야 할 지점입니다.</p>\n<br/>\n<br/>\n<h4 id=\"spy-는-우리에게-무엇을-보여주었는가\" style=\"position:relative;\"><a href=\"#spy-%EB%8A%94-%EC%9A%B0%EB%A6%AC%EC%97%90%EA%B2%8C-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%B3%B4%EC%97%AC%EC%A3%BC%EC%97%88%EB%8A%94%EA%B0%80\" aria-label=\"spy 는 우리에게 무엇을 보여주었는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spy 는 우리에게 무엇을 보여주었는가?</h4>\n<p>이 테스트는 단순히 버그를 잡은 것 이상의 의미를 가집니다. 이것은 앞선 Fake 방식과 비교했을 때 Spy의 본질적인 가치를 보여줍니다.</p>\n<p>FakeRepository 는 UserEntity.fromDomain()을 호출하고, 결과를 다시 toDomain()으로 변환하는 로직을 테스트 코드 안에 재구현했습니다.</p>\n<p>이것은 꽤나 번거로운 작업이며, 만약 어댑터의 로직이 바뀐다면 Fake의 로직도 함께 수정해야 하는 유지보수 부담을 안겨줍니다.</p>\n<p>하지만 Spy를 사용함으로써, 우리는 프로덕션 코드(UserRepositoryAdapter)를 그대로 재사용했습니다.</p>\n<p>우리는 어댑터의 로직을 모방할 필요가 없었습니다. 단지 어댑터가 외부 세계(DB)와 만나는 가장 마지막 관문인 userJpaRepository만 Mock으로 막았을 뿐입니다.</p>\n<p>이것이 바로 Spy의 진정한 강점입니다.</p>\n<p><code class=\"language-text\">Spy는 실제 구현체의 복잡하고 가치 있는 로직은 그대로 활용하면서, 테스트를 방해하는 외부 I/O 부분만 정밀하게 제어할 수 있게 해줍니다.</code></p>\n<br/>\n<br/>\n<h3 id=\"관심사에-따른-최적의-도구-선택\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%B5%9C%EC%A0%81%EC%9D%98-%EB%8F%84%EA%B5%AC-%EC%84%A0%ED%83%9D\" aria-label=\"관심사에 따른 최적의 도구 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관심사에 따른 최적의 도구 선택</h3>\n<p>이 모든 경험을 통해 나는 테스트 더블을 선택하는 명확한 기준을 세울 수 있었다.</p>\n<p>그것은 “어떤 어노테이션을 쓸까?”가 아니라, “내가 검증하려는 핵심 관심사가 무엇인가?” 입니다.</p>\n<ul>\n<li>관심사 1 : <strong>상호작용 검증</strong> 👉 <strong>Mock</strong></li>\n</ul>\n<p>SUT가 의존 객체의 올바른 메서드를 호출했는지를 확인하고자 할 때 적합합니다. 가장 순수한 단위 테스트에 사용됩니다.</p>\n<ul>\n<li>관심사 2 : <strong>최종 상태 검증</strong> 👉 <strong>Fake</strong></li>\n</ul>\n<p>로직 실행 후 시스템의 상태가 올바른지 확인하고자 할 때, 리팩토링에 강건하고 신뢰도가 높습니다.</p>\n<ul>\n<li>관심사 3 : <strong>SUT 또는 협력 객체의 복잡한 실제 로직 검증</strong> 👉 <strong>Spy</strong></li>\n</ul>\n<p>복잡한 도메인 로직 또는 협력 객체의 실제 동작이 핵심일 경우, 외부 I/O만 정밀하게 차단하며 현실적인 단위 테스트를 구성할 수 있습니다.</p>\n<br/>\n<br/>\n<h3 id=\"맺으며\" style=\"position:relative;\"><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\" aria-label=\"맺으며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맺으며</h3>\n<p>테스트 코드의 목적은 '검증'이니, 검증에 통과하는 것에만 초점을 맞추는 것이 당연하다고 생각했습니다.</p>\n<p>그래서 빨간불이 보이면 초조한 마음에 어떻게든 초록불을 보는 것에만 집중했던 것 같습니다. 마치 '답정너'처럼, 테스트에게 초록불을 보여달라고 강요하는 코드를 작성해왔던 것이었습니다.</p>\n<p>이러한 관점으로 테스트 더블을 단순히 '도구'로만 생각하고 접근하는 것이 얼마나 위험할 수 있는지 깨닫게 되었습니다.</p>\n<p>좋은 테스트란 무조건 성공하는 것이 아니라 실패해야 할 상황에서 정확하게 실패하며 우리에게 문제를 알려주는 것이었습니다.</p>\n<p>이 생각을 바탕으로 이제는 테스트 더블의 목적을 먼저 고민하고, 그에 맞는 역할을 수행할 수 있도록 도구를 신중하게 사용해야겠습니다.</p>","timeToRead":8,"frontmatter":{"title":"Mock, Spy 그리고 Fake: 당신의 테스트는 무엇을 검증하고 있는가?","summary":null,"date":"2025-07-18","categories":["test-double"],"thumbnail":null}}}]}},"pageContext":{"slug":"/beyond-mocks-the-world-of-spy-and-fake/"}},"staticQueryHashes":[],"slicesMap":{}}