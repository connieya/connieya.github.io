{"componentChunkName":"component---src-templates-post-template-tsx","path":"/스프링비즈니스로직/순환참조/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>발단</h2>\n<p>서비스간 의존성 주입을 함</p>\n<p>예)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\r\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskService</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PlanService</span> planService<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">/// ... 기타 메서드</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SchedulerService 에서 PlanService 를 의존함</p>\n<p>여기서 발생할 수 있는 문제는??</p>\n<h3>문제</h3>\n<p><strong>순환 의존성 문제가 발생 할 수 있음</strong></p>\n<p>순환 의존성이란 ?</p>\n<blockquote>\n<p>A 서비스가 B 서비스를 주입하고 B 서비스가 A 서비스를 다시 주입하는 경우 순환 의존성이 발생한다.\r\n이는 런타임 에러를 일으킬 수 있으므로 주의가 필요하다.</p>\n</blockquote>\n<p>위의 코드에서는 TaskService => PlanService 를 주입하기 때문에\r\n문제가 발생하지 않았지만\r\n만약에 PlanService => TaskService 주입한다면??</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\r\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlanService</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TaskService</span> taskService<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 기타 메서드</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>애플리케이션을 실행 했을 때 컴파일 에러가 발생한다.</p>\n<p><img src=\"img.png\" alt=\"img.png\"></p>\n<p><img src=\"img_1.png\" alt=\"img_1.png\"></p>\n<p>응 ?? 런타임 에러가 아니고 컴파일 에러??</p>\n<p>여기서 의존성 주입을 하는 방식에 따라 <strong>런타임 에러</strong>가 날수도 있고 <strong>컴파일 에러</strong>가 발생할 수 있다.</p>\n<p>위의 코드 방식은 생성자 주입을 통해 의존성을 주입 하였다.</p>\n<p>그래서 순환 참조가 발생 했을 때 컴파일 에러가 발생하였다.</p>\n<p>만약 @Autowired 를 통한 필드 주입 방식을 한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskService</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token annotation punctuation\">@Autowired</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlanService</span> planService<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">/// ... 기타 메서드</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskService</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token annotation punctuation\">@Autowired</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlanService</span> planService<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 기타 메서드..</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴파일 에러가 발생하지 않고, 런타임 에러가 발생한다.</p>\n<h3>생성자 주입 vs 필드 주입</h3>\n<br/>\n<h4>생성자 주입</h4>\n<ul>\n<li>의존성을 클래스의 생성자를 통해 주입하는 방식</li>\n<li>순환 참조 문제가 발생할 가능성이 낮아진다.</li>\n<li>객체 생성 시점에 의존성을 주입하기 때문이다.</li>\n<li>만약 순환 참조가 발생하면 컴파일 오류나 런타임 오류로 쉽게 감지 할 수 있다.</li>\n<li>대부분의 의존성 주입 프레임워크와 컨테이너에서 생성자 주입을 권장하고 지원한다.</li>\n</ul>\n<h4>필드 주입</h4>\n<ul>\n<li>의존성을 클래스의 멤버 변수로 직접 주입하는 방식이다.</li>\n<li>순환 참조 문제를 발생시킬 가능성이 높아질 수 있다.</li>\n<li>필드 주입을 통해 객체 생성 후에 의존성이 주입되므로 순환 참조가 발생하더라도 런타임에 오류가 감지된다.</li>\n<li>일반적으로 생성자 주입보다 순환 참조 문제를 발생시키기 쉽기 때문에 권장되지 않는다.</li>\n</ul>","frontmatter":{"title":"Dependency Injection 시 순환 참조 ","summary":"Dependecy Injection 시 순환 참조가 발생할 수 있는 코드","date":"2023.09.20.","categories":["Spring"],"thumbnail":""}}}]}},"pageContext":{"slug":"/스프링비즈니스로직/순환참조/"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}