{"componentChunkName":"component---src-templates-post-template-tsx","path":"/why-we-use-kafka/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%9D%98-%ED%9E%98--%ED%8C%8C%ED%8B%B0%EC%85%98\">병렬 처리의 힘 , 파티션</a></p>\n<ul>\n<li><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%98-%ED%82%A4%EA%B0%80-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0-sticky-partitioner\">파티션 키가 없는 경우 (Sticky Partitioner)</a></li>\n<li><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%98-%ED%82%A4-%EA%B8%B0%EB%B0%98-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%88%9C%EC%84%9C-%EB%B3%B4%EC%9E%A5\">파티션 키 기반 메시지 순서 보장</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%B0%EC%B9%98-%EC%BB%A8%EC%8A%98%EC%9C%BC%EB%A1%9C-io-%EC%A4%84%EC%9D%B4%EA%B8%B0\">배치 컨슘으로 I/O 줄이기</a></p>\n</li>\n<li>\n<p><a href=\"#kafka%EC%9D%98-%ED%95%B5%EC%8B%AC-%EB%B6%84%EC%82%B0-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5%EC%86%8C\">Kafka의 핵심: 분산 로그 저장소</a></p>\n<ul>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%AC%EC%B2%98%EB%A6%AC\">데이터 재처리</a></li>\n<li><a href=\"#%EB%8B%A4%EC%A4%91-%EC%BB%A8%EC%8A%88%EB%A8%B8%EC%9D%98-%EB%8F%85%EB%A6%BD%EC%A0%81-%EC%86%8C%EB%B9%84\">다중 컨슈머의 독립적 소비</a></li>\n<li><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8-%EC%8B%9C%EC%9E%91-%EC%9C%84%EC%B9%98-autooffsetreset\">컨슈머 시작 위치: auto.offset.reset</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#at-least-once-%EC%A0%84%EB%8B%AC%EA%B3%BC-%EB%A9%B1%EB%93%B1%EC%84%B1\">At-least-once 전달과 멱등성</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EB%93%80%EC%84%9C%EC%9D%98-%EC%9D%98%EC%8B%AC-%EB%82%B4-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%9E%98-%EB%8F%84%EC%B0%A9%ED%95%9C-%EA%B1%B0-%EB%A7%9E%EC%95%84\">프로듀서의 의심: \"내 메시지, 잘 도착한 거 맞아?\"</a></li>\n<li><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8%EC%9D%98-%EA%B3%A4%EB%9E%80-%EC%96%B4-%EC%9D%B4-%EC%9D%BC-%EC%95%84%EA%B9%8C-%ED%95%9C-%EA%B2%83-%EA%B0%99%EC%9D%80%EB%8D%B0\">컨슈머의 곤란: \"어? 이 일 아까 한 것 같은데...\"</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EB%93%80%EC%84%9C-%EB%A9%B1%EB%93%B1%EC%84%B1-idempotent-producer\">프로듀서 멱등성: Idempotent Producer</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8-%EB%A9%B1%EB%93%B1%EC%84%B1-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B1%85%EC%9E%84\">컨슈머 멱등성: 애플리케이션 책임</a></p>\n<ul>\n<li><a href=\"#%EC%B2%98%EB%A6%AC-%EC%9D%B4%EB%A0%A5-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%99%9C%EC%9A%A9\">처리 이력 테이블 활용</a></li>\n<li><a href=\"#%EB%B0%B0%EC%B9%98-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A4%91%EB%B3%B5-%EC%A0%9C%EA%B1%B0\">배치 내에서 중복 제거</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\">맺으며</a></p>\n</li>\n</ul>","html":"<p>최근 Spring Application Event를 공부하고 사용해 보면서, 모듈 간 의존성을 줄이는 것만으로도 코드가 단순해지고 유지보수가 쉬워지는 경험을 했습니다.\n하지만 이 방식은 JVM 내부에서만 동작합니다.<br/>\n분산 환경에서는 JVM 내부 로컬에서만 동작하는 Spring Application Event 를 사용할 수 없습니다.</p>\n<p>그렇다면 여러 애플리케이션이 동시에 통신하는 분산 환경에서는 어떻게 이벤트를 주고받을 수 있을까요?</p>\n<p>RabbitMQ, ActiveMQ 같은 전통적인 메시지 브로커도 있지만, 왜 <code class=\"language-text\">Kafka</code>는 현대 데이터 아키텍처의 중심으로 자리 잡았을까요? <br/>\n<code class=\"language-text\">Kafka</code>는 단순히 \"이벤트를 전달\"하는 것을 넘어서, 대규모 데이터 처리와 재처리, 확장성, 로그 저장소라는 특별한 강점을 가지고 있습니다.</p>\n<h2 id=\"병렬-처리의-힘--파티션\" style=\"position:relative;\"><a href=\"#%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%9D%98-%ED%9E%98--%ED%8C%8C%ED%8B%B0%EC%85%98\" aria-label=\"병렬 처리의 힘  파티션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>병렬 처리의 힘 , 파티션</h2>\n<p>Kafka의 기본 구조는 익숙합니다. 메시지를 발행하는 <code class=\"language-text\">Producer</code> 메시지를 소비하는 <code class=\"language-text\">Consumer</code> 그 사이를 중개하는 <code class=\"language-text\">Broker</code>  이 발행/구독 모델 덕분에 Producer와 Consumer는 서로를 전혀 몰라도 되며, 이는 시스템의 유연성과 확장성을 높여주는 첫 번째 비결입니다.</p>\n<p>여기에 Kafka만의 차별점이 숨어 있습니다.  Broker는  메시지를 종류별로 보관하는 <code class=\"language-text\">토픽(Topic)</code> 을 가지고 있습니다. '주문', '좋아요', '로그' 등 각 토픽은 자신만의 메시지를 보관하죠.</p>\n<p>그런데 만약 '좋아요' 토픽에 초당 수천 개의 메시지가 쏟아진다면 어떻게 될까요?</p>\n<p>하나의 토픽만으로는 이 모든 메시지를 처리하기 벅찰 겁니다. 그래서 카프카는 각 토픽을 여러 개의 작은 물리적 파일, 즉 <code class=\"language-text\">파티션(Partition)</code> 으로 나눕니다.</p>\n<p>토픽이 하나의 거대한 고속도로라면, 파티션은 그 고속도로를 구성하는 각각의 차선입니다. 차선이 많을수록 더 많은 차가 동시에 달릴 수 있듯, 파티션이 많을수록 더 많은 메시지를 동시에 처리할 수 있습니다. 이것이 카프카가 엄청난 처리량을 감당할 수 있는 병렬 처리의 비밀입니다.</p>\n<p>토픽이 여러 개의 파티션으로 나뉘어 병렬 처리가 가능하다는 건 알겠습니다. 그럼 프로듀서가 보낸 메시지는 대체 어떤 차선(파티션)으로 들어가게 될까요?</p>\n<h3 id=\"파티션-키가-없는-경우-sticky-partitioner\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%98-%ED%82%A4%EA%B0%80-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0-sticky-partitioner\" aria-label=\"파티션 키가 없는 경우 sticky partitioner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티션 키가 없는 경우 (Sticky Partitioner)</h3>\n<p>프로듀서가 파티션 키 없이 메시지를 전송하면, Kafka는 메시지를 모든 파티션에 골고루 분산하려고 합니다.</p>\n<p>하지만 최신 Kafka 클라이언트(2.4+)에서는 단순한 <code class=\"language-text\">Round-robin</code>이 아니라 <code class=\"language-text\">Sticky Partitioner</code>가 기본 동작입니다.</p>\n<p><code class=\"language-text\">Sticky Partitioner</code>는 한동안 특정 파티션에 메시지를 몰아서 전송하다가, 배치가 가득 차거나 전송이 끝나면 다음 파티션으로 전환합니다.<br>\n즉, <strong>단기적으로는 특정 파티션에 몰리지만, 장기적으로는 모든 파티션에 균등하게 분산</strong>됩니다.</p>\n<p>이 방식은 메시지를 파티션별로 묶음 단위로 보낼 수 있어 <strong>배치/압축 효율이 크게 올라가고 처리량이 향상</strong>됩니다.<br>\n따라서 로그 수집, 클릭 이벤트 같은 대규모 스트림 처리에서 매우 효과적입니다.</p>\n<p>참고로, Kafka 2.4 이전 버전에서는 <strong>Round-robin</strong> 분배가 기본이었습니다. 이 경우 메시지를 보낼 때마다 파티션을 순차적으로 바꿔가며 전송했기 때문에 즉시 균등 분산은 가능했지만, 배치 효율은 떨어졌습니다.</p>\n<h3 id=\"파티션-키-기반-메시지-순서-보장\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%98-%ED%82%A4-%EA%B8%B0%EB%B0%98-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%88%9C%EC%84%9C-%EB%B3%B4%EC%9E%A5\" aria-label=\"파티션 키 기반 메시지 순서 보장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티션 키 기반 메시지 순서 보장</h3>\n<p>프로듀서가 메시지를 보낼 때 파티션 키를 지정하면,  메시지의 흐름은 더 이상 무작위로 결정되지 않습니다.</p>\n<p>프로듀서는 주어진 키의 해시(Hash) 값을 계산하고, 그 값을 파티션의 개수로 나눈 나머지를 통해 메시지가 들어갈 파티션을 결정합니다.\n<br/>\n<code class=\"language-text\">partition = hash(key) % num_partitions</code></p>\n<p>해시 함수의 특성상, 동일한 키는 항상 동일한 해시 값을 가지므로, 반드시 동일한 파티션으로 들어가게 됩니다.</p>\n<p>그렇다면 왜 굳이 키를 써서 메시지를 특정 파티션에 \"고정\"해야 할까요? 바로 메시지 처리 순서를 보장하기 위해서입니다.</p>\n<p>예를 들어, 한 사용자가 특정 상품에 대해 1초 만에 <strong>\"좋아요\"</strong> 를 눌렀다가 바로 <strong>\"좋아요 취소\"</strong> 를 눌렀다고 상상해 봅시다. 만약 파티션 키가 없다면, '좋아요 ' 이벤트는 0번 파티션에, '좋아요 취소 ' 이벤트는 1번 파티션에 들어갈 수 있습니다. 만약 1번 파티션을 처리하는 컨슈머가 더 빨랐다면, 시스템은 '취소'를 먼저 처리하고 나중에 '좋아요'를 처리하여 최종 결과가 '좋아요' 상태로 남는, 데이터가 틀어지는 문제가 발생합니다.</p>\n<p>하지만 이때 productId를 파티션 키로 사용했다면 어떨까요? '좋아요'와 '좋아요 취소' 이벤트는 모두 동일한 productId 키를 가지므로, 반드시 같은 파티션에, 발생한 순서대로 저장됩니다. 카프카는 파티션 내에서의 순서는 보장하므로, 컨슈머는 반드시 '좋아요'를 먼저 처리하고 '좋아요 취소'를 처리하게 되어 데이터의 정합성을 지킬 수 있습니다.</p>\n<p>실제 코드에서는 kafkaTemplate.send 메소드의 두 번째 인자로 이 파티션 키를 전달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// '좋아요' 이벤트를 발행하는 코드 예시</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LikeEventPublisherImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LikeEventPublisher</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TOPIC_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"like-update-topic-v1\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProductLikeEvent<span class=\"token punctuation\">.</span>Update</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token comment\">// 토픽 이름, 파티션 키(productId), 실제 메시지 순으로 전달</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">productId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고로 파티션을 설계할 때 한 가지 중요한 제약사항이 있습니다. 파티션은 한번 늘리는 것은 가능하지만, 절대로 줄일 수는 없습니다. 파티션 수를 변경하면 키와 파티션의 매핑 규칙이 바뀌어 순서 보장이 깨질 수 있으므로, 신중한 설계가 필요합니다.</p>\n<h2 id=\"배치-컨슘으로-io-줄이기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%B9%98-%EC%BB%A8%EC%8A%98%EC%9C%BC%EB%A1%9C-io-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-label=\"배치 컨슘으로 io 줄이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배치 컨슘으로 I/O 줄이기</h2>\n<p>Kafka 컨슈머의 또 다른 강력함은 데이터를 소비하는 방식에 있습니다. 메시지를 하나씩 순차적으로 처리하는 대신, Kafka는 <strong>한 번에 여러 메시지를 묶음(Batch)으로 가져와 처리할 수 있도록 설계</strong>되었습니다.</p>\n<p>이것이 왜 엄청난 장점일까요? 개발자가 I/O 작업을 극적으로 줄일 수 있는 기회를 제공하기 때문입니다.</p>\n<p>예를 들어, '좋아요' 이벤트 100개를 처리해야 한다고 생각해 봅시다. 만약 메시지를 하나씩 처리한다면, 좋아요 집계 테이블(like_summary)에 UPDATE 쿼리를 100번 실행해야 합니다. 이는 상당한 네트워크 왕복과 DB 부하를 유발하죠.</p>\n<p>하지만 Spring Kafka에서 <strong>배치 리스너 설정</strong>을 통해 100개의 이벤트를 List<LikeUpdateEvent> 형태로 한 번에 받는다면 어떨까요? 이제 개발자는 이 100개의 이벤트가 담긴 리스트를 가지고 직접 효율적인 코드를 작성할 수 있습니다.</p>\n<p>실제로 프로젝트에서 100개의 이벤트 리스트를 stream()으로 돌려 productId 별로 그룹핑하여 Map&#x3C;Long, Long> 형태로 집계했습니다. (\"A상품\": +5, \"B상품\": -2, \"C상품\": +8...) 과 같은 집계 결과를 메모리에서 먼저 만들어내는 것이죠.</p>\n<p>이렇게 집계된 결과를 바탕으로, 각 상품별로 단 한 번의 UPDATE 쿼리만 실행하면 됩니다. 100번 실행될 뻔했던 DB I/O가 단 몇 번으로 줄어드는 마법을 우리의 코드로 실현할 수 있는 것입니다. 이는 애플리케이션의 부하를 극적으로 줄여주고, 전체적인 처리량을 비약적으로 향상시킵니다.</p>\n<h2 id=\"kafka의-핵심-분산-로그-저장소\" style=\"position:relative;\"><a href=\"#kafka%EC%9D%98-%ED%95%B5%EC%8B%AC-%EB%B6%84%EC%82%B0-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5%EC%86%8C\" aria-label=\"kafka의 핵심 분산 로그 저장소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka의 핵심: 분산 로그 저장소</h2>\n<p>전통적인 메시지 큐는 보통 컨슈머가 메시지를 성공적으로 처리하고 나면 큐에서 해당 메시지를 삭제합니다. 한 번 배달된 택배는 사라지는 것과 같죠. 하지만 카프카는 정반대로 행동합니다.</p>\n<p>카프카는 메시지를 받는 즉시, 토픽 내의 <strong>파티션(Partition)</strong> 이라는 파일 시스템에 순서대로 차곡차곡 기록합니다.</p>\n<p>마치 데이터베이스의 트랜잭션 로그처럼, 한번 기록된 데이터는 정해진 보존 기간(기본값 7일) 동안 절대로 지워지지 않습니다. 컨슈머는 메시지를 '가져가는' 것이 아니라, 특정 위치(오프셋, Offset)의 메시지를 '복사해서 읽어가는' 것에 가깝습니다.</p>\n<p>이 \"지우지 않는다\"는 단순한 특징 하나가 카프카를 완전히 다른 차원의 시스템으로 만듭니다.</p>\n<h3 id=\"데이터-재처리\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%AC%EC%B2%98%EB%A6%AC\" aria-label=\"데이터 재처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 재처리</h3>\n<p>컨슈머 애플리케이션에 버그가 있어서 잘못된 데이터를 처리했다면 어떻게 할까요?</p>\n<p>기존 메시지 큐라면 이미 사라진 데이터를 복구할 방법이 막막합니다. 하지만 카프카에서는 간단합니다. 컨슈머의 오프셋을 과거의 특정 시점으로 되돌리기만 하면 됩니다. 그러면 컨슈머는 마치 타임머신을 탄 것처럼 그 시점부터 모든 메시지를 다시 읽어와 재처리할 수 있습니다. 장애가 발생해도, 로그가 남아있는 한 데이터 처리는 언제든 복구될 수 있다는 엄청난 안정감을 줍니다.</p>\n<h3 id=\"다중-컨슈머의-독립적-소비\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%BB%A8%EC%8A%88%EB%A8%B8%EC%9D%98-%EB%8F%85%EB%A6%BD%EC%A0%81-%EC%86%8C%EB%B9%84\" aria-label=\"다중 컨슈머의 독립적 소비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중 컨슈머의 독립적 소비</h3>\n<p>데이터가 삭제되지 않기 때문에, 여러 목적을 가진 다양한 컨슈머들이 각자의 필요에 따라 동일한 데이터를 소비할 수 있습니다. 예를 들어, 동일한 '주문 발생' 이벤트를 가지고,</p>\n<ul>\n<li>A 컨슈머 그룹은 실시간으로 배송 시스템에 정보를 전달하고,</li>\n<li>B 컨슈머 그룹은 데이터를 모아 통계 대시보드를 만들고,</li>\n<li>C 컨슈머 그룹은 모든 주문 기록을 데이터 웨어하우스에 저장할 수 있습니다.</li>\n</ul>\n<p>이 모든 팀은 서로에게 전혀 영향을 주지 않고, 각자 원하는 시점의 데이터를 읽어갈 수 있습니다.</p>\n<p>이처럼 카프카는 단순한 메시지 '통로'가 아니라,  모든 이벤트의 역사가 기록되는 신뢰할 수 있는 <strong>'분산 로그 저장소(Distributed Log Store)'</strong> 에 더 가깝습니다.</p>\n<p>이것이 바로 카프카의 진짜 정체성입니다.</p>\n<h3 id=\"컨슈머-시작-위치-autooffsetreset\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8-%EC%8B%9C%EC%9E%91-%EC%9C%84%EC%B9%98-autooffsetreset\" aria-label=\"컨슈머 시작 위치 autooffsetreset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨슈머 시작 위치: auto.offset.reset</h3>\n<p>이 '로그'라는 특성을 어떻게 활용할지는 컨슈머가 길을 잃었을 때를 보면 더 명확해집니다. 완전히 새로운 컨슈머가 토픽을 구독하거나, 너무 오랫동안 꺼져 있어서 마지막 위치를 잃어버렸을 때, \"어디서부터 다시 읽을까?\"를 결정해야 합니다. 이 때 auto.offset.reset 설정이 사용됩니다. earliest로 설정하면 토픽의 맨 처음부터 모든 역사를 훑으며 데이터를 처리하고, latest(기본값)로 설정하면 과거는 무시하고 지금부터 들어오는 새로운 이벤트만 처리합니다. 데이터의 유실을 허용하지 않는 대부분의 서비스에서는 earliest를 선택하여 모든 이벤트의 역사를 존중하는 방식을 택합니다.</p>\n<h2 id=\"at-least-once-전달과-멱등성\" style=\"position:relative;\"><a href=\"#at-least-once-%EC%A0%84%EB%8B%AC%EA%B3%BC-%EB%A9%B1%EB%93%B1%EC%84%B1\" aria-label=\"at least once 전달과 멱등성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>At-least-once 전달과 멱등성</h2>\n<p>이렇게 강력한 카프카도 분산 시스템의 숙명인 '네트워크 문제'로부터 자유로울 수는 없습니다. 여기서부터 개발자의 진짜 고민이 시작됩니다. 바로 <strong>\"데이터 유실과 중복\"</strong> 의 문제입니다.</p>\n<p>카프카는 기본적으로 At-least-once(최소 한 번 전송) 시맨틱을 지향합니다. \"메시지가 유실되는 것보다는 차라리 중복되는 게 낫다\"는 철학이죠. 이 철학은 프로듀서와 컨슈머 양쪽 모두에게서 나타납니다.</p>\n<h3 id=\"프로듀서의-의심-내-메시지-잘-도착한-거-맞아\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%93%80%EC%84%9C%EC%9D%98-%EC%9D%98%EC%8B%AC-%EB%82%B4-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%9E%98-%EB%8F%84%EC%B0%A9%ED%95%9C-%EA%B1%B0-%EB%A7%9E%EC%95%84\" aria-label=\"프로듀서의 의심 내 메시지 잘 도착한 거 맞아 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로듀서의 의심: \"내 메시지, 잘 도착한 거 맞아?\"</h3>\n<p>프로듀서가 메시지를 브로커에 보냈는데, 네트워크가 잠시 불안정해서 브로커로부터 \"잘 받았어\"라는 응답(Ack)을 받지 못했다고 가정해 봅시다. 프로듀서 입장에서는 메시지가 유실됐다고 의심할 수밖에 없습니다. 그래서 카프카 클라이언트는 retries 옵션에 따라 자동으로 메시지를 재전송합니다.</p>\n<p>사실 브로커는 첫 번째 메시지를 잘 받고 저장했는데, 응답만 유실된 상황이었다면 어떻게 될까요? 브로커는 재전송된 똑같은 메시지를 또 받게 되고, 결국 토픽에는 동일한 메시지가 중복으로 저장됩니다.</p>\n<h3 id=\"컨슈머의-곤란-어-이-일-아까-한-것-같은데\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8%EC%9D%98-%EA%B3%A4%EB%9E%80-%EC%96%B4-%EC%9D%B4-%EC%9D%BC-%EC%95%84%EA%B9%8C-%ED%95%9C-%EA%B2%83-%EA%B0%99%EC%9D%80%EB%8D%B0\" aria-label=\"컨슈머의 곤란 어 이 일 아까 한 것 같은데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨슈머의 곤란: \"어? 이 일 아까 한 것 같은데...\"</h3>\n<p>컨슈머 측에서는 상황이 더 복잡해집니다.  프로듀서가 메시지를 딱 한 번만 보냈더라도, 컨슈머는 동일한 메시지를 여러 번 처리할 수 있습니다.</p>\n<p>컨슈머는 메시지를 처리한 뒤, \"나 여기까지 처리했어\"라는 의미로 오프셋을 커밋합니다. 만약 메시지 처리는 성공했는데(예: DB에 count = count + 1 실행 완료), 오프셋을 커밋하기 직전에 컨슈머 애플리케이션이 다운된다면 어떻게 될까요?</p>\n<p>컨슈머가 재시작되면, 아직 커밋되지 않은 이전 오프셋부터 메시지를 다시 가져옵니다. 결국 방금 성공했던 count = count + 1 로직이 다시 실행되어 중복 처리가 발생합니다.</p>\n<p>이 두 가지 시나리오는 \"좋아요\" 카운트가 1이 아닌 2가 올라가는 것처럼 데이터의 정합성을 깨뜨리는 심각한 문제를 일으킬 수 있습니다. 그렇다면 이 문제를 어떻게 해결해야 할까요?</p>\n<p>바로 여기서 멱등성(Idempotence) 이라는 개념이 등장합니다. \"여러 번 수행해도 결과는 한 번만 적용되는 성질\"을 의미하는 멱등성은, At-least-once 환경에서 데이터 신뢰성을 지키기 위해 반드시 고려해야 하는 개념입니다.</p>\n<h2 id=\"프로듀서-멱등성-idempotent-producer\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%93%80%EC%84%9C-%EB%A9%B1%EB%93%B1%EC%84%B1-idempotent-producer\" aria-label=\"프로듀서 멱등성 idempotent producer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로듀서 멱등성: Idempotent Producer</h2>\n<p>다행히도, 프로듀서가 메시지를 중복 발행하는 문제는 카프카가 자체적으로 제공하는 매우 강력한 기능으로 간단하게 해결할 수 있습니다. 바로 **멱등성 프로듀서(Idempotent Producer)**입니다.</p>\n<p>앞서 설명한 '응답(Ack) 유실로 인한 재전송' 문제를 해결하기 위해, 멱등성 프로듀서는 각 메시지에 고유한 시퀀스 번호를 붙여서 보냅니다. 브로커는 이 시퀀스 번호를 기억하고 있다가, 만약 이미 처리한 시퀀스 번호의 메시지가 또 들어오면 \"아, 이건 중복이구나\"라고 판단하고 조용히 무시합니다.</p>\n<p>이 놀라운 기능을 활성화하는 방법은 허무할 정도로 간단합니다. 프로듀서 설정에 단 한 줄만 추가하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># application.yml or kafka.yml</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">enable.idempotence</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>이 설정 하나만으로 프로듀서가 브로커에게 메시지를 보내는 과정의 중복 문제는 완벽하게 해결됩니다. 이제 진짜 문제는 컨슈머에게 넘어왔습니다.</p>\n<h2 id=\"컨슈머-멱등성-애플리케이션-책임\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%EC%8A%88%EB%A8%B8-%EB%A9%B1%EB%93%B1%EC%84%B1-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B1%85%EC%9E%84\" aria-label=\"컨슈머 멱등성 애플리케이션 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨슈머 멱등성: 애플리케이션 책임</h2>\n<p>컨슈머가 동일한 메시지를 중복 처리하는 문제는 카프카가 해결해 줄 수 없습니다. 오롯이 메시지를 소비하는 우리의 애플리케이션 코드로 막아내야 합니다. 다행히 몇 가지 효과적인 전략이 있습니다.</p>\n<h3 id=\"처리-이력-테이블-활용\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC-%EC%9D%B4%EB%A0%A5-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%99%9C%EC%9A%A9\" aria-label=\"처리 이력 테이블 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리 이력 테이블 활용</h3>\n<p>가장 확실하고 안정적인 방법은, 처리한 메시지의 이력을 별도의 DB 테이블에 기록하는 것입니다. \"이 메시지는 내가 이미 처리했다\"는 사실을 영구적으로 남기는 것이죠.</p>\n<ol>\n<li>먼저, 프로듀서가 메시지를 발행할 때마다 각 메시지를 고유하게 식별할 수 있는 event_id(예: UUID)를 함께 담아서 보냅니다.</li>\n<li>컨슈머는 비즈니스 로직을 처리하기 전에, event_handled와 같은 이력 테이블에 해당 event_id가 이미 기록되어 있는지 먼저 확인합니다.</li>\n<li>기록이 있다면? \"이미 처리한 작업이군!\" 하고 그냥 건너뜁니다.</li>\n<li>기록이 없다면? 비즈니스 로직을 수행하고, 로직이 성공적으로 끝나면 같은 DB 트랜잭션 안에서 event_handled 테이블에 event_id를 기록합니다.</li>\n</ol>\n<p>이 방식의 핵심은 \"실제 작업\"과 \"작업 완료 기록\"을 하나의 원자적인 DB 트랜잭션으로 묶는 것입니다. 이렇게 하면 비즈니스 로직 처리와 이력 기록 사이에 서버가 다운되더라도, 둘 중 하나만 성공하는 일 없이 데이터의 정합성을 완벽하게 지킬 수 있습니다. 구현이 다소 복잡하지만, 데이터의 정확성이 매우 중요할 때 사용하는 가장 강력한 패턴입니다</p>\n<h3 id=\"배치-내에서-중복-제거\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%B9%98-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A4%91%EB%B3%B5-%EC%A0%9C%EA%B1%B0\" aria-label=\"배치 내에서 중복 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배치 내에서 중복 제거</h3>\n<p>만약 중복이 주로 짧은 시간 내에 발생하고, DB에 의존하고 싶지 않다면 배치(Batch) 단위로 메시지를 처리하는 컨슈머의 특성을 활용할 수 있습니다.</p>\n<p>카프카 컨슈머는 보통 메시지를 한 개씩이 아닌, 여러 개를 한 묶음(List)으로 받아옵니다. 이 묶음 안에서 중복된 event_id가 있는지 확인하고, 중복을 제거한 뒤 처리하는 방식입니다.</p>\n<p>이 방법은 DB I/O 없이 메모리 내에서 간단하게 중복을 걸러낼 수 있어 매우 빠르고 가볍습니다. 하지만 이 방법에는 명확한 한계가 있습니다. 오직 '같은 배치' 안에서 발생한 중복만 제거할 수 있습니다.</p>\n<p>만약 첫 번째 배치에서 메시지를 성공적으로 처리하고 커밋하기 직전에 장애가 나서, 다음 poll()로 받아온 두 번째 배치에 동일한 메시지가 또 포함되어 있다면 이 방법으로는 막을 수 없습니다.</p>\n<p>결국 어떤 멱등성 처리 방식을 선택할지는 <strong>\"데이터 정합성을 어느 수준까지 보장해야 하는가?\"</strong> 라는 비즈니스 요구사항에 따라 달라집니다. 약간의 부정합을 감수하고 성능과 단순함을 택할 것인지, 아니면 복잡도를 감수하고 완벽한 정합성을 추구할 것인지에 대한 현명한 트레이드오프가 필요합니다.</p>\n<h2 id=\"맺으며\" style=\"position:relative;\"><a href=\"#%EB%A7%BA%EC%9C%BC%EB%A9%B0\" aria-label=\"맺으며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맺으며</h2>\n<p>이번에 카프카를 학습하고 적용하면서, 병렬 처리·파티션, 분산 로그 저장소, 멱등성 같은 개념이 단순히 이론에 그치지 않고 실무 시스템을 바꾸는 힘이 될 수 있다는 걸 직접 경험했습니다.</p>\n<p>특히 상품의 '좋아요 수' 처리 방식이 좋은 예였습니다. 이벤트 집계에서 시작한 학습이 자연스럽게 캐싱 전략으로 이어졌습니다.</p>\n<p>그동안 '좋아요 수'는 자주 변경되는 값이기 때문에 캐싱에 적용하지 않았습니다. 캐시에 잦은 쓰기 부하를 주고, DB와 캐시 간 데이터를 즉시 일치시켜야 한다는 부담 때문이었습니다. 그래서 상품 상세 조회 API는 매번 DB에서 '좋아요 수'를 직접 조회해야 했습니다.</p>\n<p>하지만 카프카를 통해 이벤트를 비동기로 처리하고, 멱등성으로 중복을 제어하면서 <strong>“데이터는 지금 당장은 조금 늦게 반영될 수 있지만, 결국 일관된 상태로 맞춰진다”</strong> 는 관점을 받아들일 수 있었습니다.</p>\n<p>이 관점 전환 덕분에 기존에는 캐시에서 제외했던 '좋아요 수'까지 포함한 상품 상세 정보를 DTO 형태로 Redis Hash에 캐싱할 수 있었고, 그 결과 조회 API의 DB 의존도를 크게 줄이고 응답성과 확장성을 높일 수 있었습니다.</p>\n<p>카프카는 단순한 메시지 브로커가 아니라, 시스템을 설계하는 방식을 바꾸어 주는 도구였습니다. <strong>느슨한 결합, 비동기 처리, 최종적 일관성</strong>이라는 키워드를 실제로 적용해 본 경험을 통해, 왜 많은 기업들이 카프카를 데이터 파이프라인의 중심으로 삼는지 조금은 이해할 수 있었습니다.</p>","timeToRead":8,"frontmatter":{"title":"kafka 아는 척 해보기","summary":null,"date":"2025-09-05","categories":["kafka"],"thumbnail":null}}}]}},"pageContext":{"slug":"/why-we-use-kafka/"}},"staticQueryHashes":[],"slicesMap":{}}