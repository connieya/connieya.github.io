{"version":3,"file":"component---src-templates-post-template-tsx-cb73f70df489f33d96a5.js","mappings":"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","sources":["webpack://my-blog/./src/components/PostDetail/PostHead.tsx","webpack://my-blog/./src/components/PostDetail/PostComment.tsx","webpack://my-blog/./src/components/PostDetail/TableOfContent.tsx","webpack://my-blog/./src/components/PostDetail/PostBody.tsx","webpack://my-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\r\nimport COLORS from 'utils/constant/colors'\r\nimport CategoryListItem from 'components/Post/CategoryListItem'\r\n\r\ntype GatsbyImgProps = {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\ntype PostHeadProps = PostHeadInfoProps & {\r\n  thumbnail: IGatsbyImageData\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  thumbnail,\r\n}) {\r\n  return (\r\n    <Container>\r\n      <Thumbnail image={thumbnail} alt=\"해당 포스트 썸네일 이미지\" />\r\n      <div>\r\n        <Title>{title}</Title>\r\n      </div>\r\n      <CategoriesCreatedAtContainer>\r\n        <CategoriesAndTimeToReadContainer>\r\n          {categories.map(category => (\r\n            <CategoryListItem category={category} key={category} />\r\n          ))}\r\n        </CategoriesAndTimeToReadContainer>\r\n        <CreatedAt>{date}</CreatedAt>\r\n      </CategoriesCreatedAtContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst Thumbnail = styled(GatsbyImage)`\r\n  width: 100%;\r\n  max-width: 768px;\r\n  margin: 4rem auto;\r\n`\r\nconst CategoriesCreatedAtContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: ${COLORS.GRAY_BOLD};\r\n`\r\n\r\nconst Title = styled.h1`\r\n  word-break: keep-all;\r\n`\r\n\r\nconst CategoriesAndTimeToReadContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst CreatedAt = styled.div``\r\n","import styled from '@emotion/styled'\r\nimport React, { createRef, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'connieya/connieya.github.io'\r\n\r\ntype UtterancesAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CommentWidget = () => {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import styled from '@emotion/styled'\r\nimport { ForwardedRef, forwardRef, useEffect } from 'react'\r\nimport COLORS from 'utils/constant/colors'\r\ntype Props = {\r\n  tableOfContents: string\r\n}\r\n\r\nconst TableOfContents = forwardRef(\r\n  ({ tableOfContents }: Props, ref: ForwardedRef<HTMLDivElement>) => {\r\n    // To Do\r\n    // intersection observer 등을 활용해 해당 태그가 보이면 목차의 백그라운드 색깔도 바꾸기.\r\n    useEffect(() => {\r\n      if (typeof ref !== 'function') {\r\n        // console.log(ref?.current?.querySelectorAll('h1, h2, h3'));\r\n      }\r\n    }, [])\r\n\r\n    return (\r\n      <Container>\r\n        <TableOfContentsRenderer\r\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\r\n        />\r\n      </Container>\r\n    )\r\n  },\r\n)\r\n\r\nexport default TableOfContents\r\n\r\nconst Container = styled.aside`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 768px;\r\n  height: 100%;\r\n  padding-left: 4rem;\r\n\r\n  @media (max-width: 1400px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst TableOfContentsRenderer = styled.nav`\r\n  position: sticky;\r\n  top: 6rem;\r\n  width: 240px;\r\n  overflow: hidden;\r\n  font-size: 0.8rem;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n    padding: 0.5rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    border-radius: 4px;\r\n    transition: all 0.1s ease-out;\r\n\r\n    &:hover {\r\n      background-color: ${COLORS.SUB_MIDDLE_BOLD};\r\n    }\r\n  }\r\n\r\n  ul:first-child {\r\n    border-left: none;\r\n  }\r\n\r\n  ul {\r\n    margin-left: 0.5rem;\r\n    padding: 0 0.5rem;\r\n    list-style: none;\r\n\r\n    border-left: 2px solid ${COLORS.GRAY};\r\n  }\r\n`\r\n","import styled from '@emotion/styled'\r\nimport { ForwardedRef, forwardRef } from 'react'\r\nimport COLORS from 'utils/constant/colors'\r\n\r\nconst PostBody = forwardRef(\r\n  ({ html }: { html: string }, ref: ForwardedRef<HTMLDivElement>) => {\r\n    return (\r\n      <MarkdownRenderer ref={ref} dangerouslySetInnerHTML={{ __html: html }} />\r\n    )\r\n  },\r\n)\r\n\r\nexport default PostBody\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  padding: 5rem 0;\r\n  line-height: 1.75;\r\n  word-break: break-all;\r\n\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    margin-bottom: 1.5rem;\r\n    font-weight: 700;\r\n  }\r\n\r\n  h1 {\r\n    padding-left: 0.2rem;\r\n    font-size: 2rem;\r\n    border-bottom: 1px solid ${COLORS.GRAY};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.75rem;\r\n    border-bottom: 1px solid ${COLORS.GRAY};\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 2rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 0 1rem;\r\n    color: ${COLORS.GRAY_BOLD};\r\n    font-weight: 800;\r\n    border-left: 2px solid ${COLORS.GRAY};\r\n  }\r\n\r\n  ol,\r\n  ul {\r\n    margin-top: 0rem;\r\n    margin-bottom: 0rem;\r\n    margin-left: 1rem;\r\n    padding: 0.5rem 0;\r\n  }\r\n\r\n  li {\r\n    font-weight: 300;\r\n  }\r\n\r\n  hr {\r\n    margin: 100px 0;\r\n    border: 1px solid #000;\r\n  }\r\n\r\n  a {\r\n    color: ${COLORS.SUB_BOLD};\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    padding: 0.5rem 0;\r\n    font-weight: 300;\r\n  }\r\n\r\n  img {\r\n    margin: 3rem 0;\r\n  }\r\n\r\n  /* Code Block Highlighting */\r\n  pre[class*='language-'],\r\n  code[class*='language-'] {\r\n    color: #d4d4d4;\r\n    font-size: 13px;\r\n    font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'Ubuntu Mono',\r\n      'Courier New', monospace;\r\n    direction: ltr;\r\n    white-space: pre;\r\n    text-align: left;\r\n    text-shadow: none;\r\n    word-break: normal;\r\n    word-spacing: normal;\r\n    tab-size: 4;\r\n    hyphens: none;\r\n    border-radius: 0.5rem;\r\n  }\r\n\r\n  pre[class*='language-']::selection,\r\n  code[class*='language-']::selection,\r\n  pre[class*='language-'] *::selection,\r\n  code[class*='language-'] *::selection {\r\n    text-shadow: none;\r\n    background: #264f78;\r\n  }\r\n\r\n  @media print {\r\n    pre[class*='language-'],\r\n    code[class*='language-'] {\r\n      text-shadow: none;\r\n    }\r\n  }\r\n\r\n  pre[class*='language-'] {\r\n    padding: 1rem;\r\n    overflow: auto;\r\n    background: #1e1e1e;\r\n  }\r\n\r\n  :not(pre) > code[class*='language-'] {\r\n    padding: 0.1em 0.3em;\r\n    background: #1e1e1e;\r\n    border-radius: 0;\r\n    border-radius: 0.3em;\r\n  }\r\n  /****************0*****************************************\r\n* Tokens\r\n*/\r\n  .namespace {\r\n    opacity: 0.7;\r\n  }\r\n\r\n  .token.doctype .token.doctype-tag {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.doctype .token.name {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.comment,\r\n  .token.prolog {\r\n    color: #6a9955;\r\n  }\r\n\r\n  .token.punctuation,\r\n  .language-html .language-css .token.punctuation,\r\n  .language-html .language-javascript .token.punctuation {\r\n    color: #d4d4d4;\r\n  }\r\n\r\n  .token.property,\r\n  .token.tag,\r\n  .token.boolean,\r\n  .token.number,\r\n  .token.constant,\r\n  .token.symbol,\r\n  .token.inserted,\r\n  .token.unit {\r\n    color: #b5cea8;\r\n  }\r\n\r\n  .token.selector,\r\n  .token.attr-name,\r\n  .token.string,\r\n  .token.char,\r\n  .token.builtin,\r\n  .token.deleted {\r\n    color: #ce9178;\r\n  }\r\n\r\n  .language-css .token.string.url {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  .token.operator,\r\n  .token.entity {\r\n    color: #d4d4d4;\r\n  }\r\n\r\n  .token.operator.arrow {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.atrule {\r\n    color: #ce9178;\r\n  }\r\n\r\n  .token.atrule .token.rule {\r\n    color: #c586c0;\r\n  }\r\n\r\n  .token.atrule .token.url {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.atrule .token.url .token.function {\r\n    color: #dcdcaa;\r\n  }\r\n\r\n  .token.atrule .token.url .token.punctuation {\r\n    color: #d4d4d4;\r\n  }\r\n\r\n  .token.keyword {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.keyword.module,\r\n  .token.keyword.control-flow {\r\n    color: #c586c0;\r\n  }\r\n\r\n  .token.function,\r\n  .token.function .token.maybe-class-name {\r\n    color: #dcdcaa;\r\n  }\r\n\r\n  .token.regex {\r\n    color: #d16969;\r\n  }\r\n\r\n  .token.important {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.italic {\r\n    font-style: italic;\r\n  }\r\n\r\n  .token.constant {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.class-name,\r\n  .token.maybe-class-name {\r\n    color: #4ec9b0;\r\n  }\r\n\r\n  .token.console {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.parameter {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.interpolation {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.punctuation.interpolation-punctuation {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.boolean {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.property,\r\n  .token.variable,\r\n  .token.imports .token.maybe-class-name,\r\n  .token.exports .token.maybe-class-name {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.selector {\r\n    color: #d7ba7d;\r\n  }\r\n\r\n  .token.escape {\r\n    color: #d7ba7d;\r\n  }\r\n\r\n  .token.tag {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.tag .token.punctuation {\r\n    color: #808080;\r\n  }\r\n\r\n  .token.cdata {\r\n    color: #808080;\r\n  }\r\n\r\n  .token.attr-name {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  .token.attr-value,\r\n  .token.attr-value .token.punctuation {\r\n    color: #ce9178;\r\n  }\r\n\r\n  .token.attr-value .token.punctuation.attr-equals {\r\n    color: #d4d4d4;\r\n  }\r\n\r\n  .token.entity {\r\n    color: #569cd6;\r\n  }\r\n\r\n  .token.namespace {\r\n    color: #4ec9b0;\r\n  }\r\n  /*********************************************************\r\n* Language Specific\r\n*/\r\n\r\n  pre[class*='language-javascript'],\r\n  code[class*='language-javascript'],\r\n  pre[class*='language-jsx'],\r\n  code[class*='language-jsx'],\r\n  pre[class*='language-typescript'],\r\n  code[class*='language-typescript'],\r\n  pre[class*='language-tsx'],\r\n  code[class*='language-tsx'] {\r\n    color: #9cdcfe;\r\n  }\r\n\r\n  pre[class*='language-css'],\r\n  code[class*='language-css'] {\r\n    color: #ce9178;\r\n  }\r\n\r\n  pre[class*='language-html'],\r\n  code[class*='language-html'] {\r\n    color: #d4d4d4;\r\n  }\r\n\r\n  .language-regex .token.anchor {\r\n    color: #dcdcaa;\r\n  }\r\n\r\n  .language-html .token.punctuation {\r\n    color: #808080;\r\n  }\r\n  /*********************************************************\r\n* Line highlighting\r\n*/\r\n  pre[class*='language-'] > code[class*='language-'] {\r\n    position: relative;\r\n    z-index: 1;\r\n  }\r\n\r\n  .line-highlight.line-highlight {\r\n    z-index: 0;\r\n    background: #f7ebc6;\r\n    box-shadow: inset 5px 0 0 #f7d87c;\r\n  }\r\n\r\n  pre[class*='language-text'],\r\n  code[class*='language-text'] {\r\n    padding: 0.25rem;\r\n    color: ${COLORS.BLACK};\r\n    background-color: ${COLORS.GRAY};\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    pre[class*='language-'] {\r\n      width: 100%;\r\n      overflow-x: auto;\r\n    }\r\n  }\r\n`\r\n","import React, { useRef } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from 'components/PostDetail/PostHead'\r\nimport PostComment from 'components/PostDetail/PostComment'\r\nimport { PostDetail } from 'types/Post'\r\nimport TableOfContents from 'components/PostDetail/TableOfContent'\r\nimport styled from '@emotion/styled'\r\nimport PostBody from 'components/PostDetail/PostBody'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostDetail[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\nconst PostTemplate = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: PostTemplateProps) => {\r\n  const contentRef = useRef<HTMLDivElement>(null)\r\n  const {\r\n    node: {\r\n      tableOfContents,\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <Container>\r\n        <PostHead\r\n          title={title}\r\n          date={date}\r\n          categories={categories}\r\n          thumbnail={gatsbyImageData}\r\n        />\r\n        <PostBody ref={contentRef} html={html} />\r\n        <PostComment />\r\n        <TableOfContents ref={contentRef} tableOfContents={tableOfContents} />\r\n      </Container>\r\n    </Template>\r\n  )\r\n}\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          tableOfContents\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 768px;\r\n  margin: 0 auto;\r\n`\r\n"],"names":["_ref","title","date","categories","thumbnail","_jsxs","Container","children","_jsx","Thumbnail","image","alt","Title","CategoriesCreatedAtContainer","CategoriesAndTimeToReadContainer","map","category","CategoryListItem","CreatedAt","_styled","target","name","styles","GatsbyImage","COLORS","GRAY_BOLD","UtterancesWrapper","CommentWidget","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","forwardRef","tableOfContents","TableOfContentsRenderer","dangerouslySetInnerHTML","__html","SUB_MIDDLE_BOLD","GRAY","html","MarkdownRenderer","SUB_BOLD","BLACK","data","allMarkdownRemark","edges","location","href","contentRef","useRef","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Template","description","url","PostHead","PostBody","PostComment","TableOfContents"],"sourceRoot":""}