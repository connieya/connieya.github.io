{"version":3,"file":"component---src-templates-post-template-tsx-9318c1189ed8b7386476.js","mappings":"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","sources":["webpack://my-blog/./src/hooks/usePostViews.ts","webpack://my-blog/./src/utils/constant/colors.ts","webpack://my-blog/./src/components/PostDetail/PostHead.tsx","webpack://my-blog/./src/components/PostDetail/TableOfContent.tsx","webpack://my-blog/./src/components/PostDetail/PostBody.tsx","webpack://my-blog/./src/templates/post_template.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\n\n// Supabase 연결을 안전하게 처리\nlet supabase: any = null\ntry {\n  const { supabase: supabaseClient } = require('../lib/supabase')\n  supabase = supabaseClient\n} catch (error) {\n  console.warn('Supabase not configured:', error)\n}\n\nexport const usePostViews = (slug: string, title?: string) => {\n  const [viewCount, setViewCount] = useState<number>(0)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // 조회수 가져오기\n  const fetchViewCount = async () => {\n    if (!supabase) {\n      setError('Supabase not configured')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .select('view_count')\n        .eq('slug', slug)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116: no rows found\n        console.error('Error fetching view count:', error)\n        setError('조회수를 불러오는데 실패했습니다.')\n      } else {\n        setViewCount(data?.view_count || 0)\n        setError(null)\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setError('조회수를 불러오는데 실패했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 조회수 증가\n  const incrementViewCount = async () => {\n    if (!supabase) return\n\n    try {\n      // 먼저 포스트가 존재하는지 확인\n      const { data: existingPost } = await supabase\n        .from('posts')\n        .select('id, view_count')\n        .eq('slug', slug)\n        .single()\n\n      if (existingPost) {\n        // 기존 포스트의 조회수 증가\n        const { error } = await supabase\n          .from('posts')\n          .update({ view_count: existingPost.view_count + 1 })\n          .eq('slug', slug)\n\n        if (error) {\n          console.error('Error incrementing view count:', error)\n        } else {\n          setViewCount(existingPost.view_count + 1)\n        }\n      } else {\n        // 새 포스트 생성 (조회수 1로 시작)\n        const { error } = await supabase\n          .from('posts')\n          .insert([{ slug, title: title || 'Untitled', view_count: 1 }])\n\n        if (error) {\n          console.error('Error creating new post:', error)\n        } else {\n          setViewCount(1)\n        }\n      }\n    } catch (err) {\n      console.error('Error incrementing view count:', err)\n    }\n  }\n\n  useEffect(() => {\n    fetchViewCount()\n  }, [slug])\n\n  return {\n    viewCount,\n    loading,\n    error,\n    incrementViewCount,\n    refetch: fetchViewCount,\n  }\n}\n","const COLORS = {\n  MAIN: '#f5f5f8',\n  SUB: '#e4f1ff',\n  SUB_MIDDLE_BOLD: '#badcff',\n  SUB_BOLD: '#0E68C8',\n  WHITE: '#ffffff',\n  BLACK: '#000000',\n  GRAY: '#e2e5e6',\n  GRAY_BOLD: '#757575',\n  SHADOW: 'rgba(82,82,82,0.75)',\n}\n\nexport default COLORS\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { PostHeadInfoProps } from './PostHeadInfo'\nimport COLORS from 'utils/constant/colors'\nimport { usePostViews } from '../../hooks/usePostViews'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  slug: string\n}\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  timeToRead,\n  slug,\n}) {\n  const { viewCount, loading } = usePostViews(slug, title)\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <CreatedAtContainer>\n        <CreatedAt>\n          {date}\n          <TimeInfo>약 {timeToRead}분</TimeInfo>\n        </CreatedAt>\n        {!loading && <ViewCount>{viewCount.toLocaleString()}회 조회</ViewCount>}\n      </CreatedAtContainer>\n    </Container>\n  )\n}\n\nexport default PostHead\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 2.5rem 1rem 2rem; /* 상단, 좌우, 하단 패딩 */\n  max-width: 768px; /* 콘텐츠 최대 너비 제한 (가운데 정렬) */\n  margin: 0 auto; /* 가운데 정렬 */\n\n  @media (max-width: 768px) {\n    padding: 2rem 0.75rem 1.5rem; /* 모바일 패딩 조정 (이전 3rem에서 2rem으로) */\n  }\n`\n\nconst Title = styled.h1`\n  word-break: keep-all;\n  line-height: 1.3; /* 제목 줄 간격 조정 (이전 1.4에서 1.3으로) */\n  font-size: 1.9rem; /* 제목 크기 키우기 (이전 1.6rem에서 2.2rem으로) */\n  margin-bottom: 1.3rem; /* 제목 아래 여백 (이전 1.5rem에서 1rem으로) */\n\n  @media (max-width: 768px) {\n    font-size: 1.8rem; /* 모바일 제목 크기 조정 (이전 2rem에서 1.8rem으로) */\n    margin-bottom: 0.8rem; /* 모바일 제목 아래 여백 (이전 1rem에서 0.8rem으로) */\n  }\n`\n\n// 카테고리 관련 컨테이너 이름 및 스타일 변경\nconst CreatedAtContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  color: ${COLORS.GRAY_BOLD};\n  font-size: 0.9rem; /* 날짜 폰트 사이즈 유지 */\n\n  @media (max-width: 768px) {\n    justify-content: flex-start; /* 모바일에서는 좌측 정렬 */\n  }\n`\n\nconst CreatedAt = styled.div`\n  white-space: nowrap; /* 날짜 줄바꿈 방지 */\n`\n\nconst TimeInfo = styled.span`\n  margin-left: 0.5rem; /* 왼쪽에 0.5rem (약 8px) 간격 추가 */\n  /* 또는 padding-left를 사용할 수도 있습니다. */\n  /* padding-left: 0.5rem; */\n`\n\nconst ViewCount = styled.span`\n  margin-left: 1rem;\n  font-size: 0.9rem;\n`\n","import styled from '@emotion/styled'\nimport { ForwardedRef, forwardRef, useEffect } from 'react'\nimport COLORS from 'utils/constant/colors'\ntype Props = {\n  tableOfContents: string\n}\n\nconst TableOfContents = forwardRef(\n  ({ tableOfContents }: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    // To Do\n    // intersection observer 등을 활용해 해당 태그가 보이면 목차의 백그라운드 색깔도 바꾸기.\n    useEffect(() => {\n      if (typeof ref !== 'function') {\n        // console.log(ref?.current?.querySelectorAll('h1, h2, h3'));\n      }\n    }, [])\n\n    return (\n      <Container>\n        <TableOfContentsRenderer\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n        />\n      </Container>\n    )\n  },\n)\n\nexport default TableOfContents\n\nconst Container = styled.aside`\n  position: absolute;\n  top: 0;\n  left: 768px;\n  height: 100%;\n  padding-left: 4rem;\n\n  @media (max-width: 1400px) {\n    display: none;\n  }\n`\n\nconst TableOfContentsRenderer = styled.nav`\n  position: sticky;\n  top: 6rem;\n  width: 240px;\n  overflow: hidden;\n  font-size: 0.8rem;\n\n  p {\n    margin: 0;\n  }\n\n  a {\n    display: block;\n    padding: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    border-radius: 4px;\n    transition: all 0.1s ease-out;\n\n    &:hover {\n      background-color: ${COLORS.SUB_MIDDLE_BOLD};\n    }\n  }\n\n  ul:first-child {\n    border-left: none;\n  }\n\n  ul {\n    margin-left: 0.5rem;\n    padding: 0 0.5rem;\n    list-style: none;\n\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n`\n","import styled from '@emotion/styled'\nimport { ForwardedRef, forwardRef } from 'react'\nimport COLORS from 'utils/constant/colors'\n\nconst PostBody = forwardRef(\n  ({ html }: { html: string }, ref: ForwardedRef<HTMLDivElement>) => {\n    return (\n      <MarkdownRenderer ref={ref} dangerouslySetInnerHTML={{ __html: html }} />\n    )\n  },\n)\n\nexport default PostBody\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  padding: 1.5rem 1rem;\n  line-height: 1.75;\n  word-break: break-all;\n\n  @media (max-width: 768px) {\n    padding: 1.5rem 0.75rem;\n  }\n\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 1.5rem;\n    font-weight: 700;\n  }\n\n  h1 {\n    padding-left: 0.2rem;\n    font-size: 2rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h2 {\n    font-size: 1.75rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h3 {\n    font-size: 1.25rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 2rem;\n    margin-bottom: 0.5rem;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  blockquote {\n    margin: 30px 0;\n    padding: 0 1rem;\n    color: ${COLORS.GRAY_BOLD};\n    font-weight: 800;\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n\n  ol,\n  ul {\n    margin-top: 0rem;\n    margin-bottom: 0rem;\n    margin-left: 1rem;\n    padding: 0.5rem 0;\n  }\n\n  li {\n    font-weight: 300;\n  }\n\n  hr {\n    margin: 100px 0;\n    border: 1px solid #000;\n  }\n\n  a {\n    color: ${COLORS.SUB_BOLD};\n  }\n\n  p {\n    margin: 0;\n    padding: 0.5rem 0;\n    font-weight: 300;\n  }\n\n  img {\n    margin: 1rem 0;\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  /* Code Block Highlighting */\n  pre[class*='language-'],\n  code[class*='language-'] {\n    color: #d4d4d4;\n    font-size: 13px;\n    font-family:\n      Menlo, Monaco, Consolas, 'Andale Mono', 'Ubuntu Mono', 'Courier New',\n      monospace;\n    direction: ltr;\n    white-space: pre;\n    text-align: left;\n    text-shadow: none;\n    word-break: normal;\n    word-spacing: normal;\n    tab-size: 4;\n    hyphens: none;\n    border-radius: 0.5rem;\n  }\n\n  pre[class*='language-']::selection,\n  code[class*='language-']::selection,\n  pre[class*='language-'] *::selection,\n  code[class*='language-'] *::selection {\n    text-shadow: none;\n    background: #264f78;\n  }\n\n  @media print {\n    pre[class*='language-'],\n    code[class*='language-'] {\n      text-shadow: none;\n    }\n  }\n\n  pre[class*='language-'] {\n    padding: 1rem;\n    overflow: auto;\n    background: #1e1e1e;\n  }\n\n  :not(pre) > code[class*='language-'] {\n    padding: 0.1em 0.3em;\n    background: #1e1e1e;\n    border-radius: 0;\n    border-radius: 0.3em;\n  }\n  /****************0*****************************************\n* Tokens\n*/\n  .namespace {\n    opacity: 0.7;\n  }\n\n  .token.doctype .token.doctype-tag {\n    color: #569cd6;\n  }\n\n  .token.doctype .token.name {\n    color: #9cdcfe;\n  }\n\n  .token.comment,\n  .token.prolog {\n    color: #6a9955;\n  }\n\n  .token.punctuation,\n  .language-html .language-css .token.punctuation,\n  .language-html .language-javascript .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.property,\n  .token.tag,\n  .token.boolean,\n  .token.number,\n  .token.constant,\n  .token.symbol,\n  .token.inserted,\n  .token.unit {\n    color: #b5cea8;\n  }\n\n  .token.selector,\n  .token.attr-name,\n  .token.string,\n  .token.char,\n  .token.builtin,\n  .token.deleted {\n    color: #ce9178;\n  }\n\n  .language-css .token.string.url {\n    text-decoration: underline;\n  }\n\n  .token.operator,\n  .token.entity {\n    color: #d4d4d4;\n  }\n\n  .token.operator.arrow {\n    color: #569cd6;\n  }\n\n  .token.atrule {\n    color: #ce9178;\n  }\n\n  .token.atrule .token.rule {\n    color: #c586c0;\n  }\n\n  .token.atrule .token.url {\n    color: #9cdcfe;\n  }\n\n  .token.atrule .token.url .token.function {\n    color: #dcdcaa;\n  }\n\n  .token.atrule .token.url .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.keyword {\n    color: #569cd6;\n  }\n\n  .token.keyword.module,\n  .token.keyword.control-flow {\n    color: #c586c0;\n  }\n\n  .token.function,\n  .token.function .token.maybe-class-name {\n    color: #dcdcaa;\n  }\n\n  .token.regex {\n    color: #d16969;\n  }\n\n  .token.important {\n    color: #569cd6;\n  }\n\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.constant {\n    color: #9cdcfe;\n  }\n\n  .token.class-name,\n  .token.maybe-class-name {\n    color: #4ec9b0;\n  }\n\n  .token.console {\n    color: #9cdcfe;\n  }\n\n  .token.parameter {\n    color: #9cdcfe;\n  }\n\n  .token.interpolation {\n    color: #9cdcfe;\n  }\n\n  .token.punctuation.interpolation-punctuation {\n    color: #569cd6;\n  }\n\n  .token.boolean {\n    color: #569cd6;\n  }\n\n  .token.property,\n  .token.variable,\n  .token.imports .token.maybe-class-name,\n  .token.exports .token.maybe-class-name {\n    color: #9cdcfe;\n  }\n\n  .token.selector {\n    color: #d7ba7d;\n  }\n\n  .token.escape {\n    color: #d7ba7d;\n  }\n\n  .token.tag {\n    color: #569cd6;\n  }\n\n  .token.tag .token.punctuation {\n    color: #808080;\n  }\n\n  .token.cdata {\n    color: #808080;\n  }\n\n  .token.attr-name {\n    color: #9cdcfe;\n  }\n\n  .token.attr-value,\n  .token.attr-value .token.punctuation {\n    color: #ce9178;\n  }\n\n  .token.attr-value .token.punctuation.attr-equals {\n    color: #d4d4d4;\n  }\n\n  .token.entity {\n    color: #569cd6;\n  }\n\n  .token.namespace {\n    color: #4ec9b0;\n  }\n  /*********************************************************\n* Language Specific\n*/\n\n  pre[class*='language-javascript'],\n  code[class*='language-javascript'],\n  pre[class*='language-jsx'],\n  code[class*='language-jsx'],\n  pre[class*='language-typescript'],\n  code[class*='language-typescript'],\n  pre[class*='language-tsx'],\n  code[class*='language-tsx'] {\n    color: #9cdcfe;\n  }\n\n  pre[class*='language-css'],\n  code[class*='language-css'] {\n    color: #ce9178;\n  }\n\n  pre[class*='language-html'],\n  code[class*='language-html'] {\n    color: #d4d4d4;\n  }\n\n  .language-regex .token.anchor {\n    color: #dcdcaa;\n  }\n\n  .language-html .token.punctuation {\n    color: #808080;\n  }\n  /*********************************************************\n* Line highlighting\n*/\n  pre[class*='language-'] > code[class*='language-'] {\n    position: relative;\n    z-index: 1;\n  }\n\n  .line-highlight.line-highlight {\n    z-index: 0;\n    background: #f7ebc6;\n    box-shadow: inset 5px 0 0 #f7d87c;\n  }\n\n  pre[class*='language-text'],\n  code[class*='language-text'] {\n    padding: 0.25rem;\n    color: ${COLORS.BLACK};\n    background-color: ${COLORS.GRAY};\n  }\n\n  @media (max-width: 768px) {\n    img {\n      width: 100%;\n    }\n\n    pre[class*='language-'] {\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n`\n","import React, { useRef } from 'react'\nimport { graphql } from 'gatsby'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/PostDetail/PostHead'\nimport PostComment from 'components/PostDetail/PostComment'\nimport { PostDetail } from 'types/Post'\nimport TableOfContents from 'components/PostDetail/TableOfContent'\nimport styled from '@emotion/styled'\nimport PostBody from 'components/PostDetail/PostBody'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostDetail[]\n    }\n  }\n  location: {\n    href: string\n  }\n  pageContext: {\n    slug: string\n  }\n}\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n  pageContext: { slug },\n}: PostTemplateProps) => {\n  const contentRef = useRef<HTMLDivElement>(null)\n  const {\n    node: {\n      tableOfContents,\n      html,\n      timeToRead,\n      frontmatter: { title, summary, date, categories },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href}>\n      <Container>\n        <PostHead\n          title={title}\n          date={date}\n          categories={categories}\n          timeToRead={timeToRead}\n          slug={slug}\n        />\n        <PostBody ref={contentRef} html={html} />\n        {/* <PostComment /> */}\n        <TableOfContents ref={contentRef} tableOfContents={tableOfContents} />\n      </Container>\n    </Template>\n  )\n}\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          html\n          timeToRead\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n`\n"],"names":["supabase","supabaseClient","require","error","console","warn","usePostViews","slug","title","viewCount","setViewCount","useState","loading","setLoading","setError","fetchViewCount","async","data","from","select","eq","single","code","view_count","err","useEffect","incrementViewCount","existingPost","update","insert","refetch","MAIN","SUB","SUB_MIDDLE_BOLD","SUB_BOLD","WHITE","BLACK","GRAY","GRAY_BOLD","SHADOW","_ref","date","timeToRead","_jsxs","Container","children","_jsx","Title","CreatedAtContainer","CreatedAt","TimeInfo","ViewCount","toLocaleString","_styled","target","name","styles","COLORS","forwardRef","ref","tableOfContents","TableOfContentsRenderer","dangerouslySetInnerHTML","__html","html","MarkdownRenderer","allMarkdownRemark","edges","location","href","pageContext","contentRef","useRef","node","frontmatter","summary","categories","Template","description","url","PostHead","PostBody","TableOfContents"],"sourceRoot":""}