{"version":3,"file":"component---src-templates-post-template-tsx-bf526fc108fd8fb8a4dd.js","mappings":"8NAiEA,MAxBmD,SAAAA,GAK/C,IALyD,MAC3DC,EAAK,KACLC,EAAI,WACJC,EAAU,UACVC,GACDJ,EACC,OACEK,EAAAA,EAAAA,MAACC,EAAS,CAAAC,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAS,CAACC,MAAON,EAAWO,IAAI,oBACjCH,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACI,EAAK,CAAAL,SAAEN,OAEVI,EAAAA,EAAAA,MAACQ,EAA4B,CAAAN,SAAA,EAC3BC,EAAAA,EAAAA,KAACM,EAAgC,CAAAP,SAC9BJ,EAAWY,IAAIC,IACdR,EAAAA,EAAAA,KAACS,EAAAA,EAAgB,CAACD,SAAUA,GAAeA,OAG/CR,EAAAA,EAAAA,KAACU,EAAS,CAAAX,SAAEL,SAIpB,EAIA,MAAMI,GAASa,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,uCAITb,GAAYU,EAAAA,EAAAA,GAAOI,EAAAA,EAAW,CAAAH,OAAA,YAAlBD,CAAmB,CAAAE,KAAA,SAAAC,OAAA,gDAK/BT,GAA4BM,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,uEAIvBK,EAAAA,EAAOC,UAAS,KAGrBb,GAAKO,EAAAA,EAAAA,GAAA,MAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,wBAILR,GAAgCK,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,oCAKhCJ,GAASC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,ICzFf,MAaMO,GAAiBP,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,+CAkCvB,MA5BsBK,KACpB,MAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,WAAU,KACR,GAAwB,OAApBF,EAAQG,QAAkB,OAE9B,MAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,8BA6BP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,QAAQ5C,IAAmB,IAAjB6C,EAAKC,GAAM9C,EAC9CgC,EAAWe,aAAaF,EAAKC,KAG/BlB,EAAQG,QAAQiB,YAAYhB,IAC3B,KAEIxB,EAAAA,EAAAA,KAACkB,EAAiB,CAACuB,IAAKrB,KCpBjC,OApBwBsB,EAAAA,EAAAA,YACtB,CAAAlD,EAA6BiD,KAAuC,IAAnE,gBAAEE,GAAwBnD,EASzB,OANA8B,EAAAA,EAAAA,WAAU,OAIP,KAGDtB,EAAAA,EAAAA,KAACF,EAAS,CAAAC,UACRC,EAAAA,EAAAA,KAAC4C,EAAuB,CACtBC,wBAAyB,CAAEC,OAAQH,SAS7C,MAAM7C,GAASa,EAAAA,EAAAA,GAAA,SAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,+GAYT8B,GAAuBjC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,sPAqBHK,EAAAA,EAAO+B,gBAAe,oHAanB/B,EAAAA,EAAOgC,KAAI,MC/DxC,OARiBN,EAAAA,EAAAA,YACf,CAAAlD,EAA6BiD,KAAuC,IAAnE,KAAEQ,GAAwBzD,EACzB,OACEQ,EAAAA,EAAAA,KAACkD,EAAgB,CAACT,IAAKA,EAAKI,wBAAyB,CAAEC,OAAQG,OAOrE,MAAMC,GAAgBvC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,iOAmBSK,EAAAA,EAAOgC,KAAI,kDAKXhC,EAAAA,EAAOgC,KAAI,8JAuB7BhC,EAAAA,EAAOC,UAAS,0CAEAD,EAAAA,EAAOgC,KAAI,sJAqB3BhC,EAAAA,EAAOmC,SAAQ,67GAgSfnC,EAAAA,EAAOoC,MAAK,qBACDpC,EAAAA,EAAOgC,KAAI,qGCzTnC,MAxCqBxD,IAKI,IAJvB6D,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,IACMjE,EAClB,MAAMkE,GAAaC,EAAAA,EAAAA,QAAuB,OAExCC,MAAM,gBACJjB,EAAe,KACfM,EACAY,aAAa,MACXpE,EAAK,QACLqE,EAAO,KACPpE,EAAI,WACJC,EACAC,WACEmE,iBAAiB,gBAAEC,GAAiB,UACpCC,MAIJV,EAAM,GAEV,OACEvD,EAAAA,EAAAA,KAACkE,EAAAA,EAAQ,CAACzE,MAAOA,EAAO0E,YAAaL,EAASM,IAAKX,EAAMvD,MAAO+D,EAAUlE,UACxEF,EAAAA,EAAAA,MAACC,EAAS,CAAAC,SAAA,EACRC,EAAAA,EAAAA,KAACqE,EAAQ,CACP5E,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZC,UAAWoE,KAEbhE,EAAAA,EAAAA,KAACsE,EAAQ,CAAC7B,IAAKiB,EAAYT,KAAMA,KACjCjD,EAAAA,EAAAA,KAACuE,EAAW,KACZvE,EAAAA,EAAAA,KAACwE,EAAe,CAAC/B,IAAKiB,EAAYf,gBAAiBA,UAOpD,MAwBD7C,GAASa,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,8D","sources":["webpack://my-blog/./src/components/PostDetail/PostHead.tsx","webpack://my-blog/./src/components/PostDetail/PostComment.tsx","webpack://my-blog/./src/components/PostDetail/TableOfContent.tsx","webpack://my-blog/./src/components/PostDetail/PostBody.tsx","webpack://my-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\nimport COLORS from 'utils/constant/colors'\nimport CategoryListItem from 'components/Post/CategoryListItem'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <Container>\n      <Thumbnail image={thumbnail} alt=\"해당 포스트 썸네일 이미지\" />\n      <div>\n        <Title>{title}</Title>\n      </div>\n      <CategoriesCreatedAtContainer>\n        <CategoriesAndTimeToReadContainer>\n          {categories.map(category => (\n            <CategoryListItem category={category} key={category} />\n          ))}\n        </CategoriesAndTimeToReadContainer>\n        <CreatedAt>{date}</CreatedAt>\n      </CategoriesCreatedAtContainer>\n    </Container>\n  )\n}\n\nexport default PostHead\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst Thumbnail = styled(GatsbyImage)`\n  width: 100%;\n  max-width: 768px;\n  margin: 4rem auto;\n`\nconst CategoriesCreatedAtContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${COLORS.GRAY_BOLD};\n`\n\nconst Title = styled.h1`\n  word-break: keep-all;\n`\n\nconst CategoriesAndTimeToReadContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst CreatedAt = styled.div``\n","import styled from '@emotion/styled'\nimport React, { createRef, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'connieya/connieya.github.io'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget = () => {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import styled from '@emotion/styled'\nimport { ForwardedRef, forwardRef, useEffect } from 'react'\nimport COLORS from 'utils/constant/colors'\ntype Props = {\n  tableOfContents: string\n}\n\nconst TableOfContents = forwardRef(\n  ({ tableOfContents }: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    // To Do\n    // intersection observer 등을 활용해 해당 태그가 보이면 목차의 백그라운드 색깔도 바꾸기.\n    useEffect(() => {\n      if (typeof ref !== 'function') {\n        // console.log(ref?.current?.querySelectorAll('h1, h2, h3'));\n      }\n    }, [])\n\n    return (\n      <Container>\n        <TableOfContentsRenderer\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n        />\n      </Container>\n    )\n  },\n)\n\nexport default TableOfContents\n\nconst Container = styled.aside`\n  position: absolute;\n  top: 0;\n  left: 768px;\n  height: 100%;\n  padding-left: 4rem;\n\n  @media (max-width: 1400px) {\n    display: none;\n  }\n`\n\nconst TableOfContentsRenderer = styled.nav`\n  position: sticky;\n  top: 6rem;\n  width: 240px;\n  overflow: hidden;\n  font-size: 0.8rem;\n\n  p {\n    margin: 0;\n  }\n\n  a {\n    display: block;\n    padding: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    border-radius: 4px;\n    transition: all 0.1s ease-out;\n\n    &:hover {\n      background-color: ${COLORS.SUB_MIDDLE_BOLD};\n    }\n  }\n\n  ul:first-child {\n    border-left: none;\n  }\n\n  ul {\n    margin-left: 0.5rem;\n    padding: 0 0.5rem;\n    list-style: none;\n\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n`\n","import styled from '@emotion/styled'\nimport { ForwardedRef, forwardRef } from 'react'\nimport COLORS from 'utils/constant/colors'\n\nconst PostBody = forwardRef(\n  ({ html }: { html: string }, ref: ForwardedRef<HTMLDivElement>) => {\n    return (\n      <MarkdownRenderer ref={ref} dangerouslySetInnerHTML={{ __html: html }} />\n    )\n  },\n)\n\nexport default PostBody\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  padding: 5rem 0;\n  line-height: 1.75;\n  word-break: break-all;\n\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 1.5rem;\n    font-weight: 700;\n  }\n\n  h1 {\n    padding-left: 0.2rem;\n    font-size: 2rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h2 {\n    font-size: 1.75rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h3 {\n    font-size: 1.25rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 2rem;\n    margin-bottom: 0.5rem;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  blockquote {\n    margin: 30px 0;\n    padding: 0 1rem;\n    color: ${COLORS.GRAY_BOLD};\n    font-weight: 800;\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n\n  ol,\n  ul {\n    margin-top: 0rem;\n    margin-bottom: 0rem;\n    margin-left: 1rem;\n    padding: 0.5rem 0;\n  }\n\n  li {\n    font-weight: 300;\n  }\n\n  hr {\n    margin: 100px 0;\n    border: 1px solid #000;\n  }\n\n  a {\n    color: ${COLORS.SUB_BOLD};\n  }\n\n  p {\n    margin: 0;\n    padding: 0.5rem 0;\n    font-weight: 300;\n  }\n\n  img {\n    margin: 3rem 0;\n  }\n\n  /* Code Block Highlighting */\n  pre[class*='language-'],\n  code[class*='language-'] {\n    color: #d4d4d4;\n    font-size: 13px;\n    font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'Ubuntu Mono',\n      'Courier New', monospace;\n    direction: ltr;\n    white-space: pre;\n    text-align: left;\n    text-shadow: none;\n    word-break: normal;\n    word-spacing: normal;\n    tab-size: 4;\n    hyphens: none;\n    border-radius: 0.5rem;\n  }\n\n  pre[class*='language-']::selection,\n  code[class*='language-']::selection,\n  pre[class*='language-'] *::selection,\n  code[class*='language-'] *::selection {\n    text-shadow: none;\n    background: #264f78;\n  }\n\n  @media print {\n    pre[class*='language-'],\n    code[class*='language-'] {\n      text-shadow: none;\n    }\n  }\n\n  pre[class*='language-'] {\n    padding: 1rem;\n    overflow: auto;\n    background: #1e1e1e;\n  }\n\n  :not(pre) > code[class*='language-'] {\n    padding: 0.1em 0.3em;\n    background: #1e1e1e;\n    border-radius: 0;\n    border-radius: 0.3em;\n  }\n  /****************0*****************************************\n* Tokens\n*/\n  .namespace {\n    opacity: 0.7;\n  }\n\n  .token.doctype .token.doctype-tag {\n    color: #569cd6;\n  }\n\n  .token.doctype .token.name {\n    color: #9cdcfe;\n  }\n\n  .token.comment,\n  .token.prolog {\n    color: #6a9955;\n  }\n\n  .token.punctuation,\n  .language-html .language-css .token.punctuation,\n  .language-html .language-javascript .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.property,\n  .token.tag,\n  .token.boolean,\n  .token.number,\n  .token.constant,\n  .token.symbol,\n  .token.inserted,\n  .token.unit {\n    color: #b5cea8;\n  }\n\n  .token.selector,\n  .token.attr-name,\n  .token.string,\n  .token.char,\n  .token.builtin,\n  .token.deleted {\n    color: #ce9178;\n  }\n\n  .language-css .token.string.url {\n    text-decoration: underline;\n  }\n\n  .token.operator,\n  .token.entity {\n    color: #d4d4d4;\n  }\n\n  .token.operator.arrow {\n    color: #569cd6;\n  }\n\n  .token.atrule {\n    color: #ce9178;\n  }\n\n  .token.atrule .token.rule {\n    color: #c586c0;\n  }\n\n  .token.atrule .token.url {\n    color: #9cdcfe;\n  }\n\n  .token.atrule .token.url .token.function {\n    color: #dcdcaa;\n  }\n\n  .token.atrule .token.url .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.keyword {\n    color: #569cd6;\n  }\n\n  .token.keyword.module,\n  .token.keyword.control-flow {\n    color: #c586c0;\n  }\n\n  .token.function,\n  .token.function .token.maybe-class-name {\n    color: #dcdcaa;\n  }\n\n  .token.regex {\n    color: #d16969;\n  }\n\n  .token.important {\n    color: #569cd6;\n  }\n\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.constant {\n    color: #9cdcfe;\n  }\n\n  .token.class-name,\n  .token.maybe-class-name {\n    color: #4ec9b0;\n  }\n\n  .token.console {\n    color: #9cdcfe;\n  }\n\n  .token.parameter {\n    color: #9cdcfe;\n  }\n\n  .token.interpolation {\n    color: #9cdcfe;\n  }\n\n  .token.punctuation.interpolation-punctuation {\n    color: #569cd6;\n  }\n\n  .token.boolean {\n    color: #569cd6;\n  }\n\n  .token.property,\n  .token.variable,\n  .token.imports .token.maybe-class-name,\n  .token.exports .token.maybe-class-name {\n    color: #9cdcfe;\n  }\n\n  .token.selector {\n    color: #d7ba7d;\n  }\n\n  .token.escape {\n    color: #d7ba7d;\n  }\n\n  .token.tag {\n    color: #569cd6;\n  }\n\n  .token.tag .token.punctuation {\n    color: #808080;\n  }\n\n  .token.cdata {\n    color: #808080;\n  }\n\n  .token.attr-name {\n    color: #9cdcfe;\n  }\n\n  .token.attr-value,\n  .token.attr-value .token.punctuation {\n    color: #ce9178;\n  }\n\n  .token.attr-value .token.punctuation.attr-equals {\n    color: #d4d4d4;\n  }\n\n  .token.entity {\n    color: #569cd6;\n  }\n\n  .token.namespace {\n    color: #4ec9b0;\n  }\n  /*********************************************************\n* Language Specific\n*/\n\n  pre[class*='language-javascript'],\n  code[class*='language-javascript'],\n  pre[class*='language-jsx'],\n  code[class*='language-jsx'],\n  pre[class*='language-typescript'],\n  code[class*='language-typescript'],\n  pre[class*='language-tsx'],\n  code[class*='language-tsx'] {\n    color: #9cdcfe;\n  }\n\n  pre[class*='language-css'],\n  code[class*='language-css'] {\n    color: #ce9178;\n  }\n\n  pre[class*='language-html'],\n  code[class*='language-html'] {\n    color: #d4d4d4;\n  }\n\n  .language-regex .token.anchor {\n    color: #dcdcaa;\n  }\n\n  .language-html .token.punctuation {\n    color: #808080;\n  }\n  /*********************************************************\n* Line highlighting\n*/\n  pre[class*='language-'] > code[class*='language-'] {\n    position: relative;\n    z-index: 1;\n  }\n\n  .line-highlight.line-highlight {\n    z-index: 0;\n    background: #f7ebc6;\n    box-shadow: inset 5px 0 0 #f7d87c;\n  }\n\n  pre[class*='language-text'],\n  code[class*='language-text'] {\n    padding: 0.25rem;\n    color: ${COLORS.BLACK};\n    background-color: ${COLORS.GRAY};\n  }\n\n  @media (max-width: 768px) {\n    img {\n      width: 100%;\n    }\n\n    pre[class*='language-'] {\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n`\n","import React, { useRef } from 'react'\nimport { graphql } from 'gatsby'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/PostDetail/PostHead'\nimport PostComment from 'components/PostDetail/PostComment'\nimport { PostDetail } from 'types/Post'\nimport TableOfContents from 'components/PostDetail/TableOfContent'\nimport styled from '@emotion/styled'\nimport PostBody from 'components/PostDetail/PostBody'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostDetail[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: PostTemplateProps) => {\n  const contentRef = useRef<HTMLDivElement>(null)\n  const {\n    node: {\n      tableOfContents,\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <Container>\n        <PostHead\n          title={title}\n          date={date}\n          categories={categories}\n          thumbnail={gatsbyImageData}\n        />\n        <PostBody ref={contentRef} html={html} />\n        <PostComment />\n        <TableOfContents ref={contentRef} tableOfContents={tableOfContents} />\n      </Container>\n    </Template>\n  )\n}\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n`\n"],"names":["_ref","title","date","categories","thumbnail","_jsxs","Container","children","_jsx","Thumbnail","image","alt","Title","CategoriesCreatedAtContainer","CategoriesAndTimeToReadContainer","map","category","CategoryListItem","CreatedAt","_styled","target","name","styles","GatsbyImage","COLORS","GRAY_BOLD","UtterancesWrapper","CommentWidget","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","forwardRef","tableOfContents","TableOfContentsRenderer","dangerouslySetInnerHTML","__html","SUB_MIDDLE_BOLD","GRAY","html","MarkdownRenderer","SUB_BOLD","BLACK","data","allMarkdownRemark","edges","location","href","contentRef","useRef","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Template","description","url","PostHead","PostBody","PostComment","TableOfContents"],"sourceRoot":""}