{"version":3,"file":"98845b49-9026cdd274124810b530.js","mappings":"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","sources":["webpack://my-blog/./src/components/Guestbook/Guestbook.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport { RotateCw } from 'lucide-react'\n\n// Supabase 연결을 안전하게 처리\nlet supabase: any = null\ntry {\n  const { supabase: supabaseClient } = require('../../lib/supabase')\n  supabase = supabaseClient\n} catch (error) {\n  console.warn('Supabase not configured:', error)\n}\n\ntype GuestbookEntry = {\n  id: number\n  name: string\n  message: string\n  created_at: string\n}\n\n// 형용사와 명사 리스트\nconst adjectives = [\n  '귀여운',\n  '엉뚱한',\n  '유쾌한',\n  '신비한',\n  '바쁜',\n  '느긋한',\n  '빠른',\n  '용감한',\n  '솔직한',\n  '긍정적인',\n  '반짝이는',\n  '활발한',\n  '장난스러운',\n  '호기심많은',\n  '수줍은',\n  '까부는',\n  '철학적인',\n  '낯가리는',\n  '멍때리는',\n  '진지한',\n  '미묘한',\n  '허세로운',\n  '알쏭달쏭한',\n  '고민많은',\n  '산뜻한',\n  '어두운',\n  '명랑한',\n]\n\nconst nouns = [\n  '여행자',\n  '방랑자',\n  '몽상가',\n  '시인',\n  '친구',\n  '손님',\n  '관찰자',\n  '도전자',\n  '수집가',\n  '산책자',\n  '꿈꾸는이',\n  '이야기꾼',\n  '독서가',\n  '탐험가',\n  '요리사',\n  '화가',\n  '커피잔',\n  '연필',\n  '안경',\n  '노트북',\n  '스푼',\n  '우산',\n  '이어폰',\n  '카메라',\n  '모자',\n  '쿠키',\n]\n\n// 랜덤 이름 생성 함수\nconst getRandomName = () => {\n  const randomAdjective =\n    adjectives[Math.floor(Math.random() * adjectives.length)]\n  const randomNoun = nouns[Math.floor(Math.random() * nouns.length)]\n  return `${randomAdjective} ${randomNoun}`\n}\n\nconst Guestbook: React.FC = () => {\n  const [entries, setEntries] = useState<GuestbookEntry[]>([])\n  const [name, setName] = useState(getRandomName())\n  const [message, setMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [initialLoading, setInitialLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // 랜덤 이름 생성 핸들러\n  const handleRandomName = () => {\n    setName(getRandomName())\n  }\n\n  // Supabase가 설정되지 않은 경우\n  if (!supabase) {\n    return (\n      <Container>\n        <ErrorMessage>\n          방명록 기능에 문제가 생겼습니다.\n          <br />\n        </ErrorMessage>\n      </Container>\n    )\n  }\n\n  // 방명록 목록 가져오기\n  const fetchGuestbookEntries = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('guestbook')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Error fetching guestbook entries:', error)\n        setError('방명록을 불러오는데 실패했습니다.')\n      } else {\n        setEntries(data || [])\n        setError(null)\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setError('방명록을 불러오는데 실패했습니다.')\n    } finally {\n      setInitialLoading(false)\n    }\n  }\n\n  // 실시간 구독 설정\n  useEffect(() => {\n    fetchGuestbookEntries()\n\n    // 실시간 구독\n    const subscription = supabase.channel('guestbook_changes').on(\n      'postgres_changes',\n      {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'guestbook',\n      },\n      payload => {\n        fetchGuestbookEntries() // 새로운 방명록이 추가되면 자동으로 새로고침\n      },\n    )\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [])\n\n  // 방명록 제출\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!name.trim() || !message.trim()) {\n      alert('이름과 내용을 모두 입력해주세요.')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const { error } = await supabase\n        .from('guestbook')\n        .insert([{ name: name.trim(), message: message.trim() }])\n\n      if (error) {\n        console.error('Error submitting guestbook entry:', error)\n        setError('방명록 등록에 실패했습니다.')\n      } else {\n        // 즉시 목록 새로고침\n        await fetchGuestbookEntries()\n        // 새로운 랜덤 이름 생성\n        setName(getRandomName())\n        setMessage('')\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setError('방명록 등록에 실패했습니다.')\n    }\n\n    setLoading(false)\n  }\n\n  // 날짜 포맷팅 함수\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    })\n  }\n\n  return (\n    <Container>\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n\n      {/* 방명록 작성 폼 */}\n      <Form onSubmit={handleSubmit}>\n        <FormCard>\n          <InputRow>\n            <NameInput\n              name=\"name\"\n              maxLength={20}\n              placeholder=\"이름\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n              disabled={loading}\n            />\n            <RandomButton\n              type=\"button\"\n              onClick={handleRandomName}\n              disabled={loading}\n            >\n              <RotateCw size={14} />\n            </RandomButton>\n          </InputRow>\n          <MessageInput\n            name=\"message\"\n            maxLength={200}\n            placeholder=\"방명록을 남겨주세요...\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            disabled={loading}\n            rows={3}\n          />\n          <SubmitButton type=\"submit\" disabled={loading}>\n            {loading ? '등록 중...' : '방명록 남기기'}\n          </SubmitButton>\n        </FormCard>\n      </Form>\n\n      {/* 방명록 목록 */}\n      <EntriesContainer>\n        {initialLoading ? (\n          <LoadingState>\n            <LoadingText>방명록을 불러오는 중...</LoadingText>\n          </LoadingState>\n        ) : (\n          <EntriesList>\n            {entries.length === 0 ? (\n              <EmptyState>\n                <EmptyIcon>📝</EmptyIcon>\n                <EmptyText>\n                  아직 방명록이 없습니다.\n                  <br />첫 번째 방명록을 남겨보세요!\n                </EmptyText>\n              </EmptyState>\n            ) : (\n              entries.map(({ id, name, message, created_at }) => (\n                <EntryItem key={id}>\n                  <EntryHeader>\n                    <EntryName>{name}</EntryName>\n                    <EntryDate>{formatDate(created_at)}</EntryDate>\n                  </EntryHeader>\n                  <EntryMessage>{message}</EntryMessage>\n                </EntryItem>\n              ))\n            )}\n          </EntriesList>\n        )}\n      </EntriesContainer>\n    </Container>\n  )\n}\n\nexport default Guestbook\n\n// 스타일 컴포넌트들\nconst Container = styled.div`\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n  padding: 2rem 1rem;\n\n  @media (max-width: 768px) {\n    padding: 2rem 0.75rem;\n  }\n`\n\nconst Form = styled.form`\n  margin-bottom: 3rem;\n`\n\nconst FormCard = styled.div`\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 1rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  max-width: 500px;\n`\n\nconst InputRow = styled.div`\n  display: flex;\n  gap: 0.75rem;\n  align-items: flex-start;\n`\n\nconst NameInput = styled.input`\n  flex: 0 0 150px;\n  padding: 0.5rem;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.8rem;\n  background: #f9fafb;\n  transition: all 0.2s ease;\n\n  &:focus {\n    outline: none;\n    border-color: #6b7280;\n    box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.1);\n    background: white;\n  }\n\n  &:disabled {\n    background: #f3f4f6;\n    cursor: not-allowed;\n  }\n`\n\nconst RandomButton = styled.button`\n  padding: 0.5rem;\n  background: #6b7280;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  min-width: 40px;\n\n  &:hover:not(:disabled) {\n    background: #4b5563;\n  }\n\n  &:disabled {\n    background: #9ca3af;\n    cursor: not-allowed;\n  }\n`\n\nconst MessageInput = styled.textarea`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.8rem;\n  background: #f9fafb;\n  resize: none;\n  min-height: 60px;\n  transition: all 0.2s ease;\n\n  &:focus {\n    outline: none;\n    border-color: #6b7280;\n    box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.1);\n    background: white;\n  }\n\n  &:disabled {\n    background: #f3f4f6;\n    cursor: not-allowed;\n  }\n`\n\nconst SubmitButton = styled.button`\n  align-self: flex-end;\n  padding: 0.5rem 1rem;\n  background: #374151;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.8rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n\n  &:hover:not(:disabled) {\n    background: #1f2937;\n  }\n\n  &:disabled {\n    background: #9ca3af;\n    cursor: not-allowed;\n  }\n`\n\nconst ErrorMessage = styled.div`\n  background: #fef2f2;\n  color: #dc2626;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  text-align: center;\n  border: 1px solid #fecaca;\n`\n\nconst EntriesContainer = styled.div`\n  margin-top: 2rem;\n`\n\nconst LoadingState = styled.div`\n  text-align: center;\n  padding: 3rem 1rem;\n`\n\nconst LoadingText = styled.p`\n  color: #6b7280;\n  font-size: 0.875rem;\n  margin: 0;\n`\n\nconst EntriesList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 3rem 1rem;\n`\n\nconst EmptyIcon = styled.div`\n  font-size: 3rem;\n  margin-bottom: 1rem;\n`\n\nconst EmptyText = styled.p`\n  color: #6b7280;\n  font-size: 0.875rem;\n  line-height: 1.5;\n`\n\nconst EntryItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`\n\nconst EntryHeader = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst EntryName = styled.span`\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #374151;\n`\n\nconst EntryDate = styled.time`\n  font-size: 0.75rem;\n  color: #6b7280;\n`\n\nconst EntryMessage = styled.p`\n  font-size: 0.875rem;\n  color: #4b5563;\n  line-height: 1.6;\n  margin: 0;\n`\n"],"names":["supabase","supabaseClient","require","error","console","warn","adjectives","nouns","getRandomName","Math","floor","random","length","Guestbook","entries","setEntries","useState","name","setName","message","setMessage","loading","setLoading","initialLoading","setInitialLoading","setError","_jsx","Container","children","_jsxs","ErrorMessage","fetchGuestbookEntries","async","data","from","select","order","ascending","err","useEffect","subscription","channel","on","event","schema","table","payload","unsubscribe","Form","onSubmit","e","preventDefault","trim","insert","alert","FormCard","InputRow","NameInput","maxLength","placeholder","value","onChange","target","disabled","RandomButton","type","onClick","handleRandomName","RotateCw","size","MessageInput","rows","SubmitButton","EntriesContainer","LoadingState","LoadingText","EntriesList","EmptyState","EmptyIcon","EmptyText","map","_ref","id","created_at","EntryItem","EntryHeader","EntryName","EntryDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","EntryMessage","_styled","styles"],"sourceRoot":""}