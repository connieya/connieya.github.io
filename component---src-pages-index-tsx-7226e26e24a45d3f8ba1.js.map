{"version":3,"file":"component---src-pages-index-tsx-7226e26e24a45d3f8ba1.js","mappings":"gMA6BA,MArBiBA,IAAwD,IAAvD,KAAEC,EAAI,QAAEC,EAAO,MAAEC,EAAK,KAAEC,EAAI,WAAEC,GAAmBL,EAIjE,OACEM,EAAAA,EAAAA,KAACC,EAAS,CAACC,GAAIJ,EAAKK,UAElBC,EAAAA,EAAAA,MAACC,EAAiB,CAAAF,SAAA,EAChBH,EAAAA,EAAAA,KAACM,EAAK,CAACC,QAPOC,MAClBC,EAAAA,EAAAA,IAASX,IAMuBK,SAAEN,KAC9BG,EAAAA,EAAAA,KAACU,EAAW,CAAAP,SAAEP,KACdI,EAAAA,EAAAA,KAACW,EAA+B,CAAAR,UAC9BC,EAAAA,EAAAA,MAACQ,EAAS,CAAAT,SAAA,CACPR,GACDS,EAAAA,EAAAA,MAACS,EAAQ,CAAAV,SAAA,CAAC,KAAGJ,EAAW,kBAUpC,MAAME,GAAYa,EAAAA,EAAAA,GAAOC,EAAAA,GAAI,CAAAC,OAAA,aAAXF,CAAY,CAAAG,KAAA,SAAAC,OAAA,gEAOxBb,GAAiBS,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,4IAajBZ,GAAKQ,EAAAA,EAAAA,GAAA,MAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,4SAsBLR,GAAWI,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,qKAYXP,GAA+BG,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,6FAS/BN,GAASE,EAAAA,EAAAA,GAAA,QAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,uBAITL,GAAQC,EAAAA,EAAAA,GAAA,QAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,uBCzEd,MAAMjB,GAASa,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,mJAaTC,GAAiBL,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,IA4BvB,MA1BmD,SAAApB,GAAsB,IAAZ,MAAE0B,GAAO1B,EACpE,OACEM,EAAAA,EAAAA,KAACC,EAAS,CAAAE,UACRH,EAAAA,EAAAA,KAACmB,EAAiB,CAAAhB,SACfiB,EAAMC,IACLC,IAAA,IACEC,MAAM,GACJC,EACAC,QAAQ,KAAEC,GAAM,WAChB3B,EAAU,YACV4B,IAEeL,EAAA,OACjBM,EAAAA,EAAAA,eAACC,EAAQ,IACHF,EACJ7B,KAAM4B,EACNI,IAAKN,EACLzB,WAAYA,SAO1B,E,UCLA,MA9BaL,IAYA,IAXXqC,UAAU,OAAEC,GACZC,MACEC,MACEC,cAAc,MAAEtC,EAAK,YAAEuC,EAAW,QAAEC,IAEtCC,mBAAqBC,MAAOnB,GAC5BoB,MACEC,iBAAmBC,gBAAiBC,GAAK,UACzCC,KAGElD,EACN,OACEM,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CACPhD,MAAOA,EACPuC,YAAaA,EACbU,IAAKT,EACLU,MAAOH,EAAUzC,UAGjBC,EAAAA,EAAAA,MAACe,EAAiB,CAAAhB,SAAA,CACf,KAEDH,EAAAA,EAAAA,KAACgD,EAAQ,CAAC5B,MAAOA,UAQlB,MAoCDD,GAAiBL,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,c","sources":["webpack://my-blog/./src/components/Post/PostItem.tsx","webpack://my-blog/./src/components/Post/PostList.tsx","webpack://my-blog/./src/pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport { navigate } from 'gatsby'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { PostFrontMatterType } from 'components/types/PostItem.types'\n\ntype Props = PostFrontMatterType & { link: string }\n\nconst PostItem = ({ date, summary, title, link, timeToRead }: Props) => {\n  const handleClick = () => {\n    navigate(link)\n  }\n  return (\n    <Container to={link}>\n      {/* 텍스트 정보 컨테이너가 이제 전체 공간을 사용 */}\n      <TextInfoContainer>\n        <Title onClick={handleClick}>{title}</Title>\n        <Description>{summary}</Description>\n        <CreatedAtAndTimeToReadContainer>\n          <CreatedAt>\n            {date}\n            <TimeInfo>약 {timeToRead}분</TimeInfo>\n          </CreatedAt>\n        </CreatedAtAndTimeToReadContainer>\n      </TextInfoContainer>\n    </Container>\n  )\n}\n\nexport default PostItem\n\nconst Container = styled(Link)`\n  display: block; /* Flexbox 대신 블록 요소로 변경 */\n  padding: 1.5rem 0;\n\n  transition: all 0.1s ease-out;\n`\n\nconst TextInfoContainer = styled.div`\n  /* 썸네일 제거로 인한 width 100% */\n  width: 100%;\n  padding: 0 1rem; /* 좌우 패딩으로 내용물 여백 확보 */\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  /* 모바일 환경에서 패딩 조정 */\n  @media (max-width: 768px) {\n    padding: 0 0.5rem;\n  }\n`\nconst Title = styled.h3`\n  margin-top: 0.5rem; /* 카테고리 아래 여백 */\n  margin-bottom: 0.5rem; /* 설명 위 여백 */\n  font-size: 1.3rem; /* 제목 크기 키우기 */\n  line-height: 1.3; /* 줄 간격 조정 */\n  word-break: keep-all; /* 단어 단위 줄바꿈 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2; /* 제목이 길 경우 두 줄까지 표시 */\n  -webkit-box-orient: vertical;\n  cursor: pointer; /* Link 컴포넌트가 아닌 H3 자체에도 cursor: pointer 유지 */\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 1.25rem;\n  }\n`\n\nconst Description = styled.div`\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  overflow: hidden;\n  color: #757575;\n  text-overflow: ellipsis;\n  word-break: keep-all;\n  -webkit-line-clamp: 3; /* 설명을 2줄에서 3줄로 늘려 정보량 확보 */\n  -webkit-box-orient: vertical;\n  margin-bottom: 1rem; /* 생성일 위 여백 */\n`\n\nconst CreatedAtAndTimeToReadContainer = styled.div`\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  padding-top: 0.5rem; /* 상단 여백 조금 줄이기 */\n  color: #757575;\n  font-size: 14px; /* CreatedAt 폰트 사이즈 통합 */\n`\n\nconst CreatedAt = styled.span`\n  white-space: nowrap;\n`\n\nconst TimeInfo = styled.span`\n  margin-left: 0.5rem; /* 왼쪽에 0.5rem (약 8px) 간격 추가 */\n  /* 또는 padding-left를 사용할 수도 있습니다. */\n  /* padding-left: 0.5rem; */\n`\n","import React, { FunctionComponent, useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { PostListItemType } from 'components/types/PostItem.types'\nimport PostItem from './PostItem'\n\nexport type PostType = {\n  node: {\n    id: string\n    frontmatter: {\n      title: string\n      summary: string\n      date: string\n      timeToRead: number\n      categories: string[]\n      thumbnail: {\n        publicURL: string\n      }\n    }\n  }\n}\n\ntype PostListProps = {\n  posts: PostType[]\n}\n\nconst Container = styled.div`\n  display: grid;\n  width: 780px;\n  margin: 0 auto;\n  padding: 40px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`\n\nconst PostListContainer = styled.div``\n\nconst PostList: FunctionComponent<PostListProps> = function ({ posts }) {\n  return (\n    <Container>\n      <PostListContainer>\n        {posts.map(\n          ({\n            node: {\n              id,\n              fields: { slug },\n              timeToRead,\n              frontmatter,\n            },\n          }: PostListItemType) => (\n            <PostItem\n              {...frontmatter}\n              link={slug}\n              key={id}\n              timeToRead={timeToRead}\n            />\n          ),\n        )}\n      </PostListContainer>\n    </Container>\n  )\n}\n\nexport default PostList\n","import React from 'react'\nimport PostList, { PostType } from 'components/Post/PostList'\nimport { graphql } from 'gatsby'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport styled from '@emotion/styled' // PostList를 감쌀 컨테이너를 위해 추가\nimport Template from 'components/Common/Template'\nimport { PostItem } from 'types/Post'\ntype Props = {\n  location: {\n    search: string\n    href: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostItem[]\n    }\n    file: {\n      childImageSharp: { gatsbyImageData: IGatsbyImageData }\n      publicURL: string\n    }\n  }\n}\nconst Home = ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges: posts },\n    file: {\n      childImageSharp: { gatsbyImageData: any },\n      publicURL,\n    },\n  },\n}: Props) => {\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      {/* <Introduction /> */}\n      <PostListContainer>\n        {' '}\n        {/* PostList를 감싸서 너비 및 마진 조정 */}\n        <PostList posts={posts} />\n      </PostListContainer>\n    </Template>\n  )\n}\n\nexport default Home\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\nconst PostListContainer = styled.div`\n  width: 100%;\n`\n"],"names":["_ref","date","summary","title","link","timeToRead","_jsx","Container","to","children","_jsxs","TextInfoContainer","Title","onClick","handleClick","navigate","Description","CreatedAtAndTimeToReadContainer","CreatedAt","TimeInfo","_styled","Link","target","name","styles","PostListContainer","posts","map","_ref2","node","id","fields","slug","frontmatter","_createElement","PostItem","key","location","search","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","childImageSharp","gatsbyImageData","any","publicURL","Template","url","image","PostList"],"sourceRoot":""}