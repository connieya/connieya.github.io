{"version":3,"file":"component---src-pages-blog-tsx-110f92f4ff04fceed11c.js","mappings":"qJAGA,IAAIA,EAAgB,KACpB,IACE,MAAQA,SAAUC,GAAmBC,EAAQ,MAC7CF,EAAWC,CACb,CAAE,MAAOE,GACPC,QAAQC,KAAK,2BAA4BF,EAC3C,CAEO,MAAMG,EAAeA,CAACC,EAAcC,KACzC,MAAM,EAACC,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,UAAiB,IAC7C,EAACC,EAAQ,EAACC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,EAACR,EAAM,EAACW,IAAYH,EAAAA,EAAAA,UAAwB,MAG5CI,EAAiBC,UACrB,IAAKhB,EAGH,OAFAc,EAAS,gCACTD,GAAW,GAIb,IACE,MAAM,KAAEI,EAAI,MAAEd,SAAgBH,EAC3BkB,KAAK,SACLC,OAAO,cACPC,GAAG,OAAQb,GACXc,SAEClB,GAAwB,aAAfA,EAAMmB,MAEjBlB,QAAQD,MAAM,6BAA8BA,GAC5CW,EAAS,wBAETJ,GAAaO,aAAI,EAAJA,EAAMM,aAAc,GACjCT,EAAS,MAEb,CAAE,MAAOU,GACPpB,QAAQD,MAAM,SAAUqB,GACxBV,EAAS,qBACX,CAAC,QACCD,GAAW,EACb,GAgDF,OAJAY,EAAAA,EAAAA,WAAU,KACRV,KACC,CAACR,IAEG,CACLE,YACAG,UACAT,QACAuB,mBAhDyBV,UACzB,GAAKhB,EAEL,IAEE,MAAQiB,KAAMU,SAAuB3B,EAClCkB,KAAK,SACLC,OAAO,kBACPC,GAAG,OAAQb,GACXc,SAEH,GAAIM,EAAc,CAEhB,MAAM,MAAExB,SAAgBH,EACrBkB,KAAK,SACLU,OAAO,CAAEL,WAAYI,EAAaJ,WAAa,IAC/CH,GAAG,OAAQb,GAEVJ,EACFC,QAAQD,MAAM,iCAAkCA,GAEhDO,EAAaiB,EAAaJ,WAAa,EAE3C,KAAO,CAEL,MAAM,MAAEpB,SAAgBH,EACrBkB,KAAK,SACLW,OAAO,CAAC,CAAEtB,OAAMC,MAAOA,GAAS,WAAYe,WAAY,KAEvDpB,EACFC,QAAQD,MAAM,2BAA4BA,GAE1CO,EAAa,EAEjB,CACF,CAAE,MAAOc,GACPpB,QAAQD,MAAM,iCAAkCqB,EAClD,GAYAM,QAASf,G,gHC1Db,MA1BiBgB,IAA8D,IAA7D,KAAEC,EAAI,QAAEC,EAAO,MAAEzB,EAAK,KAAE0B,EAAI,WAAEC,EAAU,KAAE5B,GAAawB,EACvE,MAAM,UAAEtB,EAAS,QAAEG,IAAYN,EAAAA,EAAAA,GAAaC,GAK5C,OACE6B,EAAAA,EAAAA,KAACC,EAAS,CAACC,GAAIJ,EAAKK,UAElBC,EAAAA,EAAAA,MAACC,EAAiB,CAAAF,SAAA,EAChBH,EAAAA,EAAAA,KAACM,EAAK,CAACC,QAPOC,MAClBC,EAAAA,EAAAA,IAASX,IAMuBK,SAAE/B,KAC9B4B,EAAAA,EAAAA,KAACU,EAAW,CAAAP,SAAEN,KACdO,EAAAA,EAAAA,MAACO,EAA+B,CAAAR,SAAA,EAC9BC,EAAAA,EAAAA,MAACQ,EAAS,CAAAT,SAAA,CACPP,GACDQ,EAAAA,EAAAA,MAACS,EAAQ,CAAAV,SAAA,CAAC,KAAGJ,EAAW,WAExBvB,IACA4B,EAAAA,EAAAA,MAACU,EAAS,CAAAX,SAAA,CAAE9B,EAAU0C,iBAAiB,mBAUnD,MAAMd,GAAYe,EAAAA,EAAAA,GAAOC,EAAAA,GAAI,CAAAC,OAAA,aAAXF,CAAY,CAAAG,KAAA,SAAAC,OAAA,gEAOxBf,GAAiBW,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,gFAOjBd,GAAKU,EAAAA,EAAAA,GAAA,MAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,4SAsBLV,GAAWM,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,qKAYXT,GAA+BK,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,+FAS/BR,GAASI,EAAAA,EAAAA,GAAA,QAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,uBAITP,GAAQG,EAAAA,EAAAA,GAAA,QAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,uBAMRN,GAASE,EAAAA,EAAAA,GAAA,QAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,oDCjFf,MAAMnB,GAASe,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,wKAcTC,GAAiBL,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,IAgCvB,MA9BmD,SAAArB,GAAsB,IAAZ,MAAE2B,GAAO3B,EACpE,OACEK,EAAAA,EAAAA,KAACC,EAAS,CAAAE,UACRH,EAAAA,EAAAA,KAACqB,EAAiB,CAAAlB,SACfmB,EAAMC,IACLC,IAAA,IACEC,MAAM,GACJC,EACAC,QAAQ,KAAExD,GAAM,WAChB4B,EAAU,YACV6B,IAEOJ,EAAA,OACTxB,EAAAA,EAAAA,KAAC6B,EAAQ,CACPzD,MAAOwD,EAAYxD,MACnBwB,KAAMgC,EAAYhC,KAClBkC,WAAYF,EAAYE,WACxBjC,QAAS+B,EAAY/B,QACrBC,KAAM3B,EAEN4B,WAAYA,EACZ5B,KAAMA,GAFDuD,QASnB,E,UChBA,MAzBa/B,IAYA,IAXXoC,UAAU,OAAEC,GACZnD,MACEoD,MACEC,cAAc,MAAE9D,EAAK,YAAE+D,EAAW,QAAEC,IAEtCC,mBAAqBC,MAAOhB,GAC5BiB,MACEC,iBAAmBC,gBAAiBC,GAAK,UACzCC,KAGEhD,EACN,OACEK,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CACPxE,MAAO,GAAGA,SACV+D,YAAaA,EACbU,IAAKT,EACLU,MAAOH,EAAUxC,UAEjBH,EAAAA,EAAAA,KAAC+C,EAAQ,CAACzB,MAAOA,M","sources":["webpack://my-blog/./src/hooks/usePostViews.ts","webpack://my-blog/./src/components/Post/PostItem.tsx","webpack://my-blog/./src/components/Post/PostList.tsx","webpack://my-blog/./src/pages/blog.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\n\n// Supabase 연결을 안전하게 처리\nlet supabase: any = null\ntry {\n  const { supabase: supabaseClient } = require('../lib/supabase')\n  supabase = supabaseClient\n} catch (error) {\n  console.warn('Supabase not configured:', error)\n}\n\nexport const usePostViews = (slug: string, title?: string) => {\n  const [viewCount, setViewCount] = useState<number>(0)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // 조회수 가져오기\n  const fetchViewCount = async () => {\n    if (!supabase) {\n      setError('Supabase not configured')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .select('view_count')\n        .eq('slug', slug)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116: no rows found\n        console.error('Error fetching view count:', error)\n        setError('조회수를 불러오는데 실패했습니다.')\n      } else {\n        setViewCount(data?.view_count || 0)\n        setError(null)\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setError('조회수를 불러오는데 실패했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 조회수 증가\n  const incrementViewCount = async () => {\n    if (!supabase) return\n\n    try {\n      // 먼저 포스트가 존재하는지 확인\n      const { data: existingPost } = await supabase\n        .from('posts')\n        .select('id, view_count')\n        .eq('slug', slug)\n        .single()\n\n      if (existingPost) {\n        // 기존 포스트의 조회수 증가\n        const { error } = await supabase\n          .from('posts')\n          .update({ view_count: existingPost.view_count + 1 })\n          .eq('slug', slug)\n\n        if (error) {\n          console.error('Error incrementing view count:', error)\n        } else {\n          setViewCount(existingPost.view_count + 1)\n        }\n      } else {\n        // 새 포스트 생성 (조회수 1로 시작)\n        const { error } = await supabase\n          .from('posts')\n          .insert([{ slug, title: title || 'Untitled', view_count: 1 }])\n\n        if (error) {\n          console.error('Error creating new post:', error)\n        } else {\n          setViewCount(1)\n        }\n      }\n    } catch (err) {\n      console.error('Error incrementing view count:', err)\n    }\n  }\n\n  useEffect(() => {\n    fetchViewCount()\n  }, [slug])\n\n  return {\n    viewCount,\n    loading,\n    error,\n    incrementViewCount,\n    refetch: fetchViewCount,\n  }\n}\n","import React from 'react'\nimport { navigate } from 'gatsby'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { PostFrontMatterType } from 'components/types/PostItem.types'\nimport { usePostViews } from '../../hooks/usePostViews'\n\ntype Props = PostFrontMatterType & {\n  link: string\n  timeToRead: number\n  slug: string\n}\n\nconst PostItem = ({ date, summary, title, link, timeToRead, slug }: Props) => {\n  const { viewCount, loading } = usePostViews(slug)\n\n  const handleClick = () => {\n    navigate(link)\n  }\n  return (\n    <Container to={link}>\n      {/* 텍스트 정보 컨테이너가 이제 전체 공간을 사용 */}\n      <TextInfoContainer>\n        <Title onClick={handleClick}>{title}</Title>\n        <Description>{summary}</Description>\n        <CreatedAtAndTimeToReadContainer>\n          <CreatedAt>\n            {date}\n            <TimeInfo>약 {timeToRead}분</TimeInfo>\n          </CreatedAt>\n          {!loading && (\n            <ViewCount>{viewCount.toLocaleString()}회 조회</ViewCount>\n          )}\n        </CreatedAtAndTimeToReadContainer>\n      </TextInfoContainer>\n    </Container>\n  )\n}\n\nexport default PostItem\n\nconst Container = styled(Link)`\n  display: block; /* Flexbox 대신 블록 요소로 변경 */\n  padding: 1.5rem 0;\n\n  transition: all 0.1s ease-out;\n`\n\nconst TextInfoContainer = styled.div`\n  /* 썸네일 제거로 인한 width 100% */\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\nconst Title = styled.h3`\n  margin-top: 0.5rem; /* 카테고리 아래 여백 */\n  margin-bottom: 0.5rem; /* 설명 위 여백 */\n  font-size: 1.3rem; /* 제목 크기 키우기 */\n  line-height: 1.3; /* 줄 간격 조정 */\n  word-break: keep-all; /* 단어 단위 줄바꿈 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2; /* 제목이 길 경우 두 줄까지 표시 */\n  -webkit-box-orient: vertical;\n  cursor: pointer; /* Link 컴포넌트가 아닌 H3 자체에도 cursor: pointer 유지 */\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 1.25rem;\n  }\n`\n\nconst Description = styled.div`\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  overflow: hidden;\n  color: #757575;\n  text-overflow: ellipsis;\n  word-break: keep-all;\n  -webkit-line-clamp: 3; /* 설명을 2줄에서 3줄로 늘려 정보량 확보 */\n  -webkit-box-orient: vertical;\n  margin-bottom: 1rem; /* 생성일 위 여백 */\n`\n\nconst CreatedAtAndTimeToReadContainer = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  padding-top: 0.5rem; /* 상단 여백 조금 줄이기 */\n  color: #757575;\n  font-size: 14px; /* CreatedAt 폰트 사이즈 통합 */\n`\n\nconst CreatedAt = styled.span`\n  white-space: nowrap;\n`\n\nconst TimeInfo = styled.span`\n  margin-left: 0.5rem; /* 왼쪽에 0.5rem (약 8px) 간격 추가 */\n  /* 또는 padding-left를 사용할 수도 있습니다. */\n  /* padding-left: 0.5rem; */\n`\n\nconst ViewCount = styled.span`\n  white-space: nowrap;\n  color: #757575;\n  font-size: 14px;\n`\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from './PostItem'\n\nexport type PostType = {\n  node: {\n    id: string\n    fields: {\n      slug: string\n    }\n    timeToRead: number\n    frontmatter: {\n      title: string\n      summary: string\n      date: string\n      categories: string[]\n      thumbnail: {\n        publicURL: string\n      }\n    }\n  }\n}\n\ntype PostListProps = {\n  posts: PostType[]\n}\n\nconst Container = styled.div`\n  display: grid;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n  padding: 40px 1rem 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 0.75rem;\n  }\n`\n\nconst PostListContainer = styled.div``\n\nconst PostList: FunctionComponent<PostListProps> = function ({ posts }) {\n  return (\n    <Container>\n      <PostListContainer>\n        {posts.map(\n          ({\n            node: {\n              id,\n              fields: { slug },\n              timeToRead,\n              frontmatter,\n            },\n          }: PostType) => (\n            <PostItem\n              title={frontmatter.title}\n              date={frontmatter.date}\n              categories={frontmatter.categories}\n              summary={frontmatter.summary}\n              link={slug}\n              key={id}\n              timeToRead={timeToRead}\n              slug={slug}\n            />\n          ),\n        )}\n      </PostListContainer>\n    </Container>\n  )\n}\n\nexport default PostList\n","import React from 'react'\nimport PostList, { PostType } from 'components/Post/PostList'\nimport { graphql } from 'gatsby'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport Template from 'components/Common/Template'\nimport { PostItem } from 'types/Post'\n\ntype Props = {\n  location: {\n    search: string\n    href: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostItem[]\n    }\n    file: {\n      childImageSharp: { gatsbyImageData: IGatsbyImageData }\n      publicURL: string\n    }\n  }\n}\n\nconst Blog = ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges: posts },\n    file: {\n      childImageSharp: { gatsbyImageData: any },\n      publicURL,\n    },\n  },\n}: Props) => {\n  return (\n    <Template\n      title={`${title} - 개발`}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <PostList posts={posts} />\n    </Template>\n  )\n}\n\nexport default Blog\n\nexport const getBlogData = graphql`\n  query getBlogData {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\n"],"names":["supabase","supabaseClient","require","error","console","warn","usePostViews","slug","title","viewCount","setViewCount","useState","loading","setLoading","setError","fetchViewCount","async","data","from","select","eq","single","code","view_count","err","useEffect","incrementViewCount","existingPost","update","insert","refetch","_ref","date","summary","link","timeToRead","_jsx","Container","to","children","_jsxs","TextInfoContainer","Title","onClick","handleClick","navigate","Description","CreatedAtAndTimeToReadContainer","CreatedAt","TimeInfo","ViewCount","toLocaleString","_styled","Link","target","name","styles","PostListContainer","posts","map","_ref2","node","id","fields","frontmatter","PostItem","categories","location","search","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","childImageSharp","gatsbyImageData","any","publicURL","Template","url","image","PostList"],"sourceRoot":""}